{
    "docs": [
        {
            "location": "/", 
            "text": "Icecast 2.4.1 Documentation\n\n\nIcecast is a streaming media server which currently supports Ogg Vorbis and MP3 audio streams.\nIt can be used to create an Internet radio station or a privately running jukebox and many\nthings in between. It is very versatile in that new formats can be added relatively easily\nand supports open standards for commuincation and interaction.\n\n\nIcecast is distributed under the GNU GPL, version 2. A copy of this license is included with\nthis software in the COPYING file.\n\n\nThere are two major parts to most streaming media servers: The component providing the\ncontent (what we call source clients) and the component which is responsible for serving that\ncontent to listeners (this is the function of Icecast).\n\n\nPrerequisites\n\n\nIcecast requires the following packages:\n\n\n\n\nlibxml2\n\n\nlibxslt\n\n\ncurl\n Version \n= 7.10\n\n\nlibogg/libvorbis\n Version \n= 1.0\n\n\nOpenSSL\n (Optional, enable if SSL support is desired)\n\n\n\n\nWhat platforms are supported?\n\n\nCurrently the following Unix platforms are supported:\n\n\n\n\nLinux (Most flavors including Redhat and Debian)\n\n\nFreeBSD\n\n\nOpenBSD\n\n\nSolaris\n\n\n\n\nCurrently the following Windows platforms are supported:\n\n\n\n\nWindows Vista\n\n\nWindows 7\n\n\nWindows 8\n\n\nWindows Server 2003\n\n\nWindows Server 2008\n\n\nWindows Server 2012\n\n\n\n\nBuild/Install\n\n\nTo build Icecast on a Unix platform, perform the following:\n\n\nRun\n\n\n./configure\nmake\nmake install\n\n\n\nto build and install this release.\n\n\nA sample config file will be placed in \n/usr/local/etc\n (on UNIX) or in the current working\ndirectory (on Win32) and is called \nicecast.xml\n.\n\n\nDocumentation for Icecast is available in the doc directory, by viewing \ndoc/index.html\n in a\nbrowser.\n\n\nWhere do I go for questions?\n\n\nThere are many ways to contact the icecast development team, best ways are:\n\n\n\n\nThe \nIcecast Mailing list\n\n\nThe \nIcecast Developer Mailing list\n, for more development-related questions.\n\n\nIcecast IRC Chat at the \n#icecast\n channel on irc.freenode.net", 
            "title": "Introduction"
        }, 
        {
            "location": "/#icecast-241-documentation", 
            "text": "Icecast is a streaming media server which currently supports Ogg Vorbis and MP3 audio streams.\nIt can be used to create an Internet radio station or a privately running jukebox and many\nthings in between. It is very versatile in that new formats can be added relatively easily\nand supports open standards for commuincation and interaction.  Icecast is distributed under the GNU GPL, version 2. A copy of this license is included with\nthis software in the COPYING file.  There are two major parts to most streaming media servers: The component providing the\ncontent (what we call source clients) and the component which is responsible for serving that\ncontent to listeners (this is the function of Icecast).", 
            "title": "Icecast 2.4.1 Documentation"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "Icecast requires the following packages:   libxml2  libxslt  curl  Version  = 7.10  libogg/libvorbis  Version  = 1.0  OpenSSL  (Optional, enable if SSL support is desired)", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#what-platforms-are-supported", 
            "text": "Currently the following Unix platforms are supported:   Linux (Most flavors including Redhat and Debian)  FreeBSD  OpenBSD  Solaris   Currently the following Windows platforms are supported:   Windows Vista  Windows 7  Windows 8  Windows Server 2003  Windows Server 2008  Windows Server 2012", 
            "title": "What platforms are supported?"
        }, 
        {
            "location": "/#buildinstall", 
            "text": "To build Icecast on a Unix platform, perform the following:  Run  ./configure\nmake\nmake install  to build and install this release.  A sample config file will be placed in  /usr/local/etc  (on UNIX) or in the current working\ndirectory (on Win32) and is called  icecast.xml .  Documentation for Icecast is available in the doc directory, by viewing  doc/index.html  in a\nbrowser.", 
            "title": "Build/Install"
        }, 
        {
            "location": "/#where-do-i-go-for-questions", 
            "text": "There are many ways to contact the icecast development team, best ways are:   The  Icecast Mailing list  The  Icecast Developer Mailing list , for more development-related questions.  Icecast IRC Chat at the  #icecast  channel on irc.freenode.net", 
            "title": "Where do I go for questions?"
        }, 
        {
            "location": "/basic_setup/", 
            "text": "Basic Requirements\n\n\nThis section will describe the essential requirements in setting up a simple Internet radio station. It is by no means a complete list but should give you enough to get started. Please also note that those are generic instructions. If you installed a Linux/Unix distribution package, then it will likely come with different paths, different means of starting it, etc. In that case please also refer to the documentation of that distribution and or a distribution specific How-To.\n\n\nAs already explained in the Introduction, there are two major components involved: The streaming server (Icecast in this case) and the source client.\n\n\nThe following diagram shows how Icecast works:\n\n\n\n\nA Source Client (i.e. IceS, RoarAudio, \u2026) connects to a mountpoint on the Icecast server and sends audio or video data to it. Listeners connect to the mountpoint and Icecast send the stream to them.\nThe Icecast server will be the place where all listeners of your stream will connect. The source client (in general) runs on a separate machine than Icecast, but does not necessarily need to.\n\n\nThe Basics\n\n\nEach Icecast server can house multiple streams, we call these mountpoints. A mountpoint is a unique name on your server identifying a particular stream - it looks like a filename, such as /stream.ogg and a listener can only listen to a single mountpoint at a time. This means you can have a single Icecast server contain multiple broadcasts with different content, or possibly the same broadcast but with streams of different bitrates or qualities. In this case each broadcast or stream is a separate mountpoint.\n\n\nSetting up Icecast\n\n\nAt this point, the steps outlined here related to the Unix version or Win32 console version of Icecast. Icecast is also available in a Win32 GUI version, and the steps are similar in setup, but not quite the same.\n\n\nThe first step in the process is to install the Icecast server itself. The recommended way to do this is using the distro packages, or in case of Win32 download the binary package or installer. How to do this is not contained within this documentation.\nAfter installation there is placed a sample config file named \nicecast.xml\n in either \n/usr/local/etc\n, \n/etc/\n or \n/etc/icecast2/\n (for UNIX) or in the current working directory, in a folder called \netc\n, in case you are using the Window binary package.\n\n\nThe next step is to edit the \nicecast.xml\n config file and set the appropriate values. Most of the specified values in the samples are fine, for a basic setup the following entries should be specified, and if neccessary, changed to suite your situation:\n\n\nhostname\n - DNS name or IP address used for stream directory listings.\n\n\nsource-password\n - Will be used for the source client authentication.\n\n\nadmin-password\n - Will be used for authenticating admin features of Icecast.\n\n\nlisten-socket\n (both port and bind-address)\n\nIf you expect many listeners, make sure to adjust the \nclients\n limit in the \nlimits\n block.\n\nAdditionally make sure to note where the Icecast log file is stored, see the \nlogdir\n value in the \npaths\n section.\n\n\nOnce the configuration file is modified, you should be able to start the server with the following command\n\n\nicecast -c /path/to/icecast.xml\n\n\n\nIf no error messages are generated, then check the \nerror.log\n file in the log directory for the \u2018server started\u2019 message, it will look something like:\n\n\n[2014-11-20  19:17:48] INFO main/main Icecast 2.4.1 server started\n\n\n\nYou may notice slight variations to the line above, but the key thing here is that the server is started, logging is working and the version is shown.  \n\n\nYou can also verify that Icecast is started by visiting the following URL \nhttp://localhost:8000/admin/stats.xsl\n on the machine running Icecast. Replace localhost with the correct hostname and adjust the port, if you aren't using the default port 8000.\n\n\nYou should be prompted for a username and password. Enter the username \nadmin\n and the password you entered for \nadmin-password\n in the config. If all is well, you should see a Status Page which represents Icecast statistics (more about that later).  \n\n\nSetting up the Source Client\n\n\nNow that the Icecast server is started you must configure your source client. The information you will need for the source client is the following:  \n\n\n\n\nHostname (or IP address) and port of the Icecast server - both of these come from \nlisten-socket\n  \n\n\nSource password - from \nsource-password\n  \n\n\n\n\nAdditionally, you will need to choose a mountpoint and specify this in the source client. Icecast does not need to know about each mountpoint (although you can configure settings for specific mountpoint, this is covered on Advanced configuration), however some points to mention regarding mountpoints:\n\nAll Ogg Vorbis streams should have mountpoints that end in .ogg (i.e. /mystream.ogg). This is due to the lazy way most media players infer the type of stream.\n\nMP3 streams usually do not contain an extension (/mystream). Mount points also should not contain any spaces or odd characters (again due to the lazy way many of the media players are coded).\n\n\nOnce you have configured your source client, you should be able to connect it to the Icecast server. Verify that it is connected by hitting the stats.xsl URL that was mentioned above.\n\n\nNow that you have the source connnected, listening to the stream involves simply opening the appropriate following URL in a browser: \n\n\nhttp://yourip:port/mounpoint-you-specified\n\n\n\nSo for instance, if you attached your source client to an Icecast server located at 192.0.2.23:8000 with a mountpoint of /mystream.ogg, then you would open \nhttp://192.0.2.23:8000/mystream.ogg\n within your media player.\n\nAlternatively you can use \nhttp://192.0.2.23:8000/mystream.ogg.m3u\n, (note the .m3u extension added) which will serve up a link that opens most media players. It is important to note that m3u need not contain only MP3 stream, it can contain streams of arbitrary content-type and is used by Icecast to serve a playlist that represents your broadcast to listening clients.", 
            "title": "Basic Setup"
        }, 
        {
            "location": "/basic_setup/#basic-requirements", 
            "text": "This section will describe the essential requirements in setting up a simple Internet radio station. It is by no means a complete list but should give you enough to get started. Please also note that those are generic instructions. If you installed a Linux/Unix distribution package, then it will likely come with different paths, different means of starting it, etc. In that case please also refer to the documentation of that distribution and or a distribution specific How-To.  As already explained in the Introduction, there are two major components involved: The streaming server (Icecast in this case) and the source client.  The following diagram shows how Icecast works:   A Source Client (i.e. IceS, RoarAudio, \u2026) connects to a mountpoint on the Icecast server and sends audio or video data to it. Listeners connect to the mountpoint and Icecast send the stream to them.\nThe Icecast server will be the place where all listeners of your stream will connect. The source client (in general) runs on a separate machine than Icecast, but does not necessarily need to.", 
            "title": "Basic Requirements"
        }, 
        {
            "location": "/basic_setup/#the-basics", 
            "text": "Each Icecast server can house multiple streams, we call these mountpoints. A mountpoint is a unique name on your server identifying a particular stream - it looks like a filename, such as /stream.ogg and a listener can only listen to a single mountpoint at a time. This means you can have a single Icecast server contain multiple broadcasts with different content, or possibly the same broadcast but with streams of different bitrates or qualities. In this case each broadcast or stream is a separate mountpoint.", 
            "title": "The Basics"
        }, 
        {
            "location": "/basic_setup/#setting-up-icecast", 
            "text": "At this point, the steps outlined here related to the Unix version or Win32 console version of Icecast. Icecast is also available in a Win32 GUI version, and the steps are similar in setup, but not quite the same.  The first step in the process is to install the Icecast server itself. The recommended way to do this is using the distro packages, or in case of Win32 download the binary package or installer. How to do this is not contained within this documentation.\nAfter installation there is placed a sample config file named  icecast.xml  in either  /usr/local/etc ,  /etc/  or  /etc/icecast2/  (for UNIX) or in the current working directory, in a folder called  etc , in case you are using the Window binary package.  The next step is to edit the  icecast.xml  config file and set the appropriate values. Most of the specified values in the samples are fine, for a basic setup the following entries should be specified, and if neccessary, changed to suite your situation:  hostname  - DNS name or IP address used for stream directory listings.  source-password  - Will be used for the source client authentication.  admin-password  - Will be used for authenticating admin features of Icecast.  listen-socket  (both port and bind-address) \nIf you expect many listeners, make sure to adjust the  clients  limit in the  limits  block. \nAdditionally make sure to note where the Icecast log file is stored, see the  logdir  value in the  paths  section.  Once the configuration file is modified, you should be able to start the server with the following command  icecast -c /path/to/icecast.xml  If no error messages are generated, then check the  error.log  file in the log directory for the \u2018server started\u2019 message, it will look something like:  [2014-11-20  19:17:48] INFO main/main Icecast 2.4.1 server started  You may notice slight variations to the line above, but the key thing here is that the server is started, logging is working and the version is shown.    You can also verify that Icecast is started by visiting the following URL  http://localhost:8000/admin/stats.xsl  on the machine running Icecast. Replace localhost with the correct hostname and adjust the port, if you aren't using the default port 8000.  You should be prompted for a username and password. Enter the username  admin  and the password you entered for  admin-password  in the config. If all is well, you should see a Status Page which represents Icecast statistics (more about that later).", 
            "title": "Setting up Icecast"
        }, 
        {
            "location": "/basic_setup/#setting-up-the-source-client", 
            "text": "Now that the Icecast server is started you must configure your source client. The information you will need for the source client is the following:     Hostname (or IP address) and port of the Icecast server - both of these come from  listen-socket     Source password - from  source-password      Additionally, you will need to choose a mountpoint and specify this in the source client. Icecast does not need to know about each mountpoint (although you can configure settings for specific mountpoint, this is covered on Advanced configuration), however some points to mention regarding mountpoints: \nAll Ogg Vorbis streams should have mountpoints that end in .ogg (i.e. /mystream.ogg). This is due to the lazy way most media players infer the type of stream. \nMP3 streams usually do not contain an extension (/mystream). Mount points also should not contain any spaces or odd characters (again due to the lazy way many of the media players are coded).  Once you have configured your source client, you should be able to connect it to the Icecast server. Verify that it is connected by hitting the stats.xsl URL that was mentioned above.  Now that you have the source connnected, listening to the stream involves simply opening the appropriate following URL in a browser:   http://yourip:port/mounpoint-you-specified  So for instance, if you attached your source client to an Icecast server located at 192.0.2.23:8000 with a mountpoint of /mystream.ogg, then you would open  http://192.0.2.23:8000/mystream.ogg  within your media player. \nAlternatively you can use  http://192.0.2.23:8000/mystream.ogg.m3u , (note the .m3u extension added) which will serve up a link that opens most media players. It is important to note that m3u need not contain only MP3 stream, it can contain streams of arbitrary content-type and is used by Icecast to serve a playlist that represents your broadcast to listening clients.", 
            "title": "Setting up the Source Client"
        }, 
        {
            "location": "/config_file/", 
            "text": "This section will describe each section of the configuration file.\n\n\n\n\nNote\n\n\nEspecially for new Icecast users, editing the config file can be quite tricky.\nIt is thus recommended to make a \nbackup of the original config file\n and then\n\nstart by just changing all passwords\n, nothing else.\n\n\n\n\nShould you need to customize the configuration, then make a backup of your working config file, before you\nmake any changes. If Icecast refuses to start it is in most cases due to a malformed config file. In such a\ncase running the following command should point out most XML syntax problems:\n\n\nxmllint icecast.xml\n\n\n\nAlso check the Icecast error.log for additional hints in case of problems!\n\n\nGeneral Settings\n\n\nhostname\nexample.org\n/hostname\n\n\nlocation\nMoon\n/location\n\n\nadmin\nicemaster@example.org\n/admin\n\n\nfileserve\n1\n/fileserve\n\n\nserver-id\nicecast 2.4.1\n/server-id\n\n\n\n\n\n\n\nhostname\n\n\nThis is the DNS name (or IP address) that will be used for the stream directory lookups or\n  possibily the playlist generation if a Host header is not provided. This should be something\n  that your listeners can use.\n\n\nNote\n: This should not the the URL of your stream's website or so, but the hostname for this\n  Icecast server!\n\n\nlocation\n\n\nThis sets the location string for this Icecast instance. It will be shown e.g on the web interface.\n\n\nadmin\n\n\nThis should contain contact details for getting in touch with the server administrator.\n  Usually this will be an email address, but as this can be an arbitrary string it could also\n  be a phone number. This will be shown e.g. on the web interface.\n\n\nfileserve\n\n\nThis flag turns on the Icecast fileserver from which static files can be served. All files\n  are served relative to the path specified in the \nwebroot\n configuration setting.\n\n  By default the setting is enabled so that requests for the static files needed by the status \n  and admin pages, such as images and CSS are retrievable.\n\n\nserver-id\n\n\nThis optional setting allows for the administrator of the server to override the default\n  server identification. The default is icecast followed by a version number.\n\n  It is not recommended to use this setting, unless you have very good reasons and know\n  what you are doing.\n\n\n\n\nLimits\n\n\nlimits\n\n    \nclients\n100\n/clients\n\n    \nsources\n2\n/sources\n\n    \nqueue-size\n102400\n/queue-size\n\n    \nclient-timeout\n30\n/client-timeout\n\n    \nheader-timeout\n15\n/header-timeout\n\n    \nsource-timeout\n10\n/source-timeout\n\n    \nburst-on-connect\n1\n/burst-on-connect\n\n    \nburst-size\n65536\n/burst-size\n\n\n/limits\n\n\n\n\n\nThis section contains server level settings. Usually only the \nclients\n and \nsources\n values\nneed to be adjusted.\n\nOnly modify this section if you know what you are doing.\n\n\n\n\nclients\n\n\nTotal number of concurrent clients supported by the server. Listeners are considered clients,\n  but so are accesses to any static content (i.e. fileserved content) and also any requests to\n  gather stats. These are max concurrent connections for the entire server (not per mountpoint).\n\n\nsources\n\n\nMaximum number of connected sources supported by the server. This includes active relays and source clients.\n\n\nqueue-size\n\n\nThis is the maximum size (in bytes) of the stream queue. A listener may temporarily\n  lag behind due to network congestion and in this case an internal queue is maintained for the\n  listeners. If the queue grows larger than this config value, then it is truncated and any listeners\n  found will be removed from the stream. This will be the default setting for the streams which is\n  512k unless overridden here.\n\n  You can override this in the individual mount settings as well, which can be\n  useful if you have a mixture of high bandwidth video and low bitrate audio streams.\n\n\nclient-timeout\n\n\nThis does not seem to be used.\n\n\nheader-timeout\n\n\nThe maximum time (in seconds) to wait for a request to come in once the client has made a connection\n  to the server. In general this value should not need to be tweaked.\n\n\nsource-timeout\n\n\nIf a connected source does not send any data within this timeout period (in seconds),\n  then the source connection will be removed from the server.\n\n\nburst-on-connect\n\n\nThis option is deprecated, use \nburst-size\n instead.\n\n\nburst-size\n\n\nThe burst size is the amount of data (in bytes) to burst to a client at connection time. This is to quickly fill\n  the pre-buffer used by media players. The default is 64 kbytes which is a typical size used by most clients so changing\n  it is usually not required. This setting applies to all mountpoints unless overridden in the mount settings. Ensure that this value is smaller than queue-size, if necessary increase queue-size to be larger than your desired burst-size. Failure to do so might result in aborted listener client connection attempts, due to initial burst leading to the connection already exceeding the queue-size limit.\n\n\n\n\nAuthentication\n\n\nThis section contains all the usernames and passwords used for administration purposes or to connect sources and relays.\nFor more information, refer to the \nAuthentication\n Page.\n\n\nYellowPage Directory Settings\n\n\ndirectory\n\n    \nyp-url-timeout\n15\n/yp-url-timeout\n\n    \nyp-url\nhttp://dir.xiph.org/cgi-bin/yp-cgi\n/yp-url\n\n\n/directory\n\n\n\n\n\nThis section contains all the settings for listing a stream on any of the Icecast YP Directory servers.\nMultiple occurances of this section can be specified in order to be listed on multiple directory servers.\n\nFor more Information see the \nListing in a YellowPage Directory\n Page.\n\n\n\n\nyp-url-timeout\n\n\nThis value is the maximum time Icecast will wait for a response from a particular directory server.\n  The recommended value should be sufficient for most directory servers.\n\n\nyp-url\n\n\nThe URL which Icecast uses to communicate with the Directory server.\n  The value for this setting is provided by the owner of the Directory server.\n\n\n\n\nTCP Port settings\n\n\nThe following shows how you can specify the listening settings for the server.\n\n\nlisten-socket\n\n    \nport\n8000\n/port\n\n    \nbind-address\n127.0.0.1\n/bind-address\n\n\n/listen-socket\n\n\n\nlisten-socket\n\n    \nport\n8443\n/port\n\n    \ntls\n1\n/tls\n\n\n/listen-socket\n\n\n\nlisten-socket\n\n    \nport\n8004\n/port\n\n    \nshoutcast-mount\n/live.mp3\n/shoutcast-mount\n\n\n/listen-socket\n\n\n\n\n\nThe first listen-socket block shows how to make Icecast listen on port 8000, and additionally specifies\na \nbind-address\n, which limits this port to only listen for connections from this address.\n\nIf a bind-address is not specified for a particular listen-socket, then the socket will be bound to all\ninterfaces (including IPv6 if available). For most people, the bind-address option will not\nbe required and often confuses people.\n\n\nAnother possibility is to use an \nssl\n boolean setting which informs Icecast that a secured\nconnection is to be used. A common use for using a secure connection would be for admin page access.\n\n\nThe last listen-socket block in this example shows how to defined a Shoutcast compatible port. This can\nbe done by setting the \nshoutcast-mount\n setting. This will implicity define a second listening socket\nwhose port number is always one higher than the port defined (because the Shoutcast protocol requires\ntwo ports) and also informs Icecast of which mountpoint the Shoutcast source client on this port will be using.\n\n\n\n\nport\n\n\nThe TCP port that will be used to accept client connections.\n\n\nbind-address\n\n\nAn optional IP address that can be used to bind to a specific network\n  card. If not supplied, then it will bind to all interfaces.\n\n\ntls\n\n\nIf set to 1 will enable HTTPS on this listen-socket. Icecast must have been compiled against OpenSSL to be able to do so.\n\n\nshoutcast-mount\n\n\nAn optional mountpoint setting to be used when Shoutcast DSP compatible clients connect.\n\n  Defining this within a listen-socket group tells Icecast that this port and the subsequent port are to be used for\n  Shoutcast compatible source clients.\n\n\n\n\nHTTP headers\n\n\nhttp-headers\n\n    \nheader name=\nAccess-Control-Allow-Origin\n value=\n*\n /\n\n    \nheader name=\nX-Robots-Tag\n value=\nindex, noarchive\n status=\n200\n /\n\n\n/http-headers\n\n\n\n\n\nIcecast can be configured to send custom HTTP headers. This is available as a global setting and inside mountpoints. This section explains the global settings.\n\n\nThis functionality was introduced mainly to enable the use of simplified cross-origin resource sharing. The Icecast default configuration contains the first header, as seen in the above exmple, for this reason.\n\n\n\n    \nhttp-headers\n\n    \nThis element is placed anywhere inside the main section of the Icecast config.\n        It will contain \nheader\n child elements, that specify the actual headers one by one.\n\n\n    \nheader\n\n    \nThis tag specifies the actual header to be sent to a HTTP client in response to every request.\n\n        This tag can contain the following attributes:\n        \n\n            \nname\n\n            \nSpecifies the HTTP header field name. (required)\n\n            \nvalue\n\n            \nSpecifies the HTTP header field value. (required)\n\n            \nstatus\n\n            \nLimits sending the header to certain HTTP status codes.\n\n                If not specified, the default is to return the header for every HTTP status code.\n                This attribute is only available for global headers, at the moment. (optional)\n            \n\n        \n\n    \n\n\n\n\n\nAt the moment only global headers will be sent in case the HTTP status is not \"200\". This is subject to change in the future.\nAvoid placing comments inside \nhttp-headers\n as, in this release, it will prevent Icecast from parsing further \nheader\n tags.\n\n\nRelaying Streams\n\n\nThis section contains the servers relay settings. The relays are implemented using a pull system where the receiving\nserver connects as if it's a listener to the sending server.\n\nThere are two types of relay setups, a \u201cMaster server relay\u201d or a \u201cSpecific Mountpoint relay.\u201d\n\n\nFor information about the two types and how to configure them, refer to the \nRelaying\n Page.\n\n\nMount Specific Settings\n\n\n\n\n\nmount type=\nnormal\n\n    \nmount-name\n/example-complex.ogg\n/mount-name\n\n    \nusername\nothersource\n/username\n\n    \npassword\nhackmemore\n/password\n\n    \nmax-listeners\n1\n/max-listeners\n\n    \nmax-listener-duration\n3600\n/max-listener-duration\n\n    \ndump-file\n/tmp/dump-example1.ogg\n/dump-file\n\n    \nintro\n/intro.ogg\n/intro\n\n    \nfallback-mount\n/example2.ogg\n/fallback-mount\n\n    \nfallback-override\n1\n/fallback-override\n\n    \nfallback-when-full\n1\n/fallback-when-full\n\n    \ncharset\nISO8859-1\n/charset\n\n    \npublic\n1\n/public\n\n    \nstream-name\nMy audio stream\n/stream-name\n\n    \nstream-description\nMy audio description\n/stream-description\n\n    \nstream-url\nhttp://some.place.com\n/stream-url\n\n    \ngenre\nclassical\n/genre\n\n    \nbitrate\n64\n/bitrate\n\n    \ntype\napplication/ogg\n/type\n\n    \nsubtype\nvorbis\n/subtype\n\n    \nhidden\n1\n/hidden\n\n    \nburst-size\n65536\n/burst-size\n\n    \nmp3-metadata-interval\n4096\n/mp3-metadata-interval\n\n    \nauthentication type=\nxxxxxx\n\n            \n!-- See authentication documentation --\n\n    \n/authentication\n\n    \nhttp-headers\n\n            \nheader name=\nAccess-Control-Allow-Origin\n value=\n*\n /\n\n            \nheader name=\nX-Robots-Tag\n value=\nindex, noarchive\n /\n\n            \nheader name=\nfoo\n value=\nbar\n status=\n200\n /\n\n            \nheader name=\nNelson\n value=\nHa-Ha!\n status=\n404\n /\n\n    \n/http-headers\n\n    \non-connect\n/home/icecast/bin/source-start\n/on-connect\n\n    \non-disconnect\n/home/icecast/bin/source-end\n/on-disconnect\n\n\n/mount\n\n\n\n\n\nThis section contains the settings which apply only to a specific mountpoint and applies to an incoming\nstream whether it is a relay or a source client. The purpose of the mount definition is to state certain\ninformation that can override either global/default settings or settings provided from the incoming stream.\n\n\nA mount does not need to be stated for each incoming source although you may want to specific certain settings\nlike the maximum number of listeners or a mountpoint specific username/password. As a general rule, only define\nwhat you need to but each mount definition needs at least the mount-name. Changes to most of these will apply\nacross a configuration file re-read even on active streams, however some only apply when the stream starts or\nends.\n\n\n\n\ntype\n\n\nThe type of the mount point (default: \"normal\"). A mount of type \"default\"\n  can be used to specify common values for multiple mountpoints.\n\n  Note that default mountpoints won't merge with other mount blocks.\n  You only get those values if no \ntype=\"normal\"\n mount block exists\n  corresponding to your mountpoint.\n\n\nmount-name\n\n\nThe name of the mount point for which these settings apply.\n  MUST NOT be used in case of mount type \"default\".\n\n\n\n\n\n\n\n\n\nusername\n\n\nAn optional value which will set the username that a source must use to connect using this mountpoint.\n  Do not set this value unless you are sure that the source clients connecting to the mount point can be\n  configured to send a username other than \nsource\n.\n\n  If this value is not present the default username is \nsource\n.\n\n\n\n\n\n\n\n\n\npassword\n\n\nAn optional value which will set the password that a source must use to connect using this mountpoint.\n  There is also a \nURL based authentication method\n for sources that can be used instead.\n\n\nmax-listeners\n\n\nAn optional value which will set the maximum number of listeners that can be attached to this mountpoint.\n\n\nmax-listener-duration\n\n\nAn optional value which will set the length of time a listener will stay connected to the stream.\n\n  An auth component may override this.\n\n\ndump-file\n\n\nAn optional value which will set the filename which will be a dump of the stream coming through \n  on this mountpoint. This filename is processed with strftime(3). This allows to use variables like \n%F\n.\n\n\nintro\n\n\nAn optional value which will specify the file those contents will be sent to new listeners when they\n  connect but before the normal stream is sent. Make sure the format of the file specified matches the\n  streaming format. The specified file is appended to webroot before being opened.\n\n\nfallback-mount\n\n\nThis optional value specifies a mountpoint that clients are automatically moved\n  to if the source shuts down or is not streaming at the time a listener connects. Only one can be\n  listed in each mount and should refer to another mountpoint on the same server that is streaming in\n  the same streaming format.\n\n  If clients cannot fallback to another mountpoint, due to a missing\n  fallback-mount or it states a mountpoint that is just not available, then those clients will be\n  disconnected. If clients are falling back to a mountpoint and the fallback-mount is not actively\n  streaming but defines a fallback-mount itself then those clients may be moved there instead. This\n  multi-level fallback allows clients to cascade several mountpoints.\n\n  A fallback mount can also state a file that is located in webroot. This is useful for playing a\n  pre-recorded file in the case of a stream going down. It will repeat until either the listener\n  disconnects or a stream comes back available and takes the listeners back. As per usual, the file\n  format should match the stream format, failing to do so may cause problems with playback.\n\n  Note that the fallback file is not timed so be careful if you intend to relay this. They are fine\n  on slave streams but don't use them on master streams, if you do then the relay will consume stream\n  data at a faster rate and the listeners on the relay would eventually get kicked off.\n\n\nfallback-override\n\n\nWhen enabled, this allows a connecting source client or relay on this mountpoint to move listening\n  clients back from the fallback mount.\n\n\nfallback-when-full\n\n\nWhen set to \n1\n, this will cause new listeners, when the max listener count for the mountpoint has\n  been reached, to move to the fallback mount if there is one specified.\n\n\ncharset\n\n\nFor non-Ogg streams like MP3, the metadata that is inserted into the stream often has no defined character set.\n  We have traditionally assumed UTF8 as it allows for multiple language sets on the web pages and stream directory,\n  however many source clients for MP3 type streams have assumed Latin1 (ISO 8859-1) or leave it to whatever character\n  set is in use on the source client system.\n\n  This character mismatch has been known to cause a problem as the stats engine and stream directory servers want UTF8\n  so now we assume Latin1 for non-Ogg streams (to handle the common case) but you can specify an alternative character\n  set with this option.\n\n  The source clients can also specify a \ncharset=\n parameter to the metadata update URL if they so wish.\n\n\npublic\n\n\nThe default setting for this is \n-1\n indicating that it is up to the source client or relay to determine if this mountpoint\n  should advertise. A setting of \n0\n will prevent any advertising and a setting of \n1\n will force it to advertise. \n  If you do force advertising you may need to set other settings listed below as the YP server can refuse to advertise\n  if there is not enough information provided.\n\n\nstream-name\n\n\nSetting this will add the specified name to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one.\n\n\nstream-description\n\n\nSetting this will add the specified description to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one.\n\n\nstream-url\n\n\nSetting this will add the specified URL to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one.\n\n  The URL is generally for directing people to a website.\n\n\ngenre\n\n\nSetting this will add the specified genre to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one.\n\n  This can be anything be using certain key words can help searches in the YP directories.\n\n\nbitrate\n\n\nSetting this will add the specified bitrate to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one.\n\n  This is stated in kbps.\n\n\ntype\n\n\nSetting this will add the specified mime type to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one.\n\n  It is very unlikely that this will be needed.\n\n\nsubtype\n\n\nSetting this will add the specified subtype to the stats (and therefore YP) for this mountpoint.\n  The subtype is really to help the YP server to identify the components of the type.\n  An example setting is vorbis/theora do indicate the codecs in an Ogg stream\n\n\nburst-size\n\n\nThis optional setting allows for providing a burst size which overrides the default burst size as defined in limits.\n\n  The value is in bytes.\n\n\nmp3-metadata-interval\n\n\nThis optional setting specifies what interval, in bytes, there is between metadata updates within shoutcast compatible streams.\n  This only applies to new listeners connecting on this mountpoint, not existing listeners falling back to this mountpoint. The\n  default is either the hardcoded server default or the value passed from a relay.\n\n\nhidden\n\n\nEnable this to prevent this mount from being shown on the xsl pages. This is mainly for cases where a local relay is configured\n  and you do not want the source of the local relay to be shown.\n\n\n\n\n\n\n\n\n\nauthentication\n\n\nThis specifies that the named mount point will require listener (or source) authentication. Currently, we support a file-based\n  authentication scheme (\ntype=htpasswd\n) and URL based authentication request forwarding. A mountpoint configured with an authenticator\n  will display a red key next to the mount point name on the admin screens.\n\n  You can read more about authentication and URL based source authentication \nhere\n.\n\n\nhttp-headers\n\n\nThis element is placed anywhere inside the mount section of the icecast config. It will contain \nheader\n child elements, that specify the actual HTTP headers one by one.\n\n\nheader\n\n\nThis tag specifies the actual header to be sent to a HTTP client in response to every request for this mount point, but currently only if the HTTP status code is \"200\".\n  This tag can contain the following attributes:\n\n\n\n\n\n\nname\n is required and its value specifies the HTTP header field name.\n\n\nvalue\n is required and its value specifies the HTTP header field value.\n\n\n\n\n\n\non-connect\n\n\nState a program that is run when the source is started. It is passed a parameter which is the name of the mountpoint that is starting.\n  The processing of the stream does not wait for the script to end.\n  Caution should be exercised as there is a small chance of stream file descriptors being mixed up with script file descriptors, if the FD numbers go above 1024. This will be further addressed in the next Icecast release.\n  \nThis option is not available on Win32\n\n\non-disconnect\n\n\nState a program that is run when the source ends. It is passed a parameter which is the name of the mountpoint that has ended.\n  The processing of the stream does not wait for the script to end.\n\n  Caution should be exercised as there is a small chance of stream file descriptors being mixed up with script file descriptors, if the FD numbers go above 1024. This will be further addressed in the next Icecast release.\n  \nThis option is not available on Win32\n\n\n\n\nPath Settings\n\n\npaths\n\n    \nbasedir\n./\n/basedir\n\n    \nlogdir\n./logs\n/logdir\n\n    \npidfile\n./icecast.pid\n/pidfile\n\n    \nwebroot\n./web\n/webroot\n\n    \nadminroot\n./admin\n/adminroot\n\n    \nallow-ip\n/path/to/ip_allowlist\n/allow-ip\n\n    \ndeny-ip\n/path_to_ip_denylist\n/deny-ip\n\n    \ntls-certificate\n/path/to/certificate.pem\n/tls-certificate\n\n    \nssl-allowed-ciphers\nECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS\n/ssl-allowed-ciphers\n\n    \nalias source=\n/foo\n dest=\n/bar\n/\n\n\n/paths\n\n\n\n\n\nThis section contains paths which are used for various things within icecast. All paths (other than any aliases) should not end in a \n/\n.\n\n\n\n\nbasedir\n\n\nThis path is used in conjunction with the chroot settings, and specifies the base directory that is chrooted to when the server is started.\n\n\nThis feature is not supported on Win32.\n\n\nlogdir\n\n\nThis path specifies the base directory used for logging. Both the \nerror.log\n and \naccess.log\n will be created relative to this directory.\n\n\npidfile\n\n\nThis pathname specifies the file to write at startup and to remove at normal shutdown. The file contains the process id of the icecast process.\n\n  This could be read and used for sending signals to Icecast.\n\n\nwebroot\n\n\nThis path specifies the base directory used for all static file requests. This directory can contain all standard file types\n  (including mp3s and ogg vorbis files). For example, if webroot is set to \n/var/share/icecast2\n, and a request for\n  \nhttp://server:port/mp3/stuff.mp3\n comes in, then the file \n/var/share/icecast2/mp3/stuff.mp3\n will be served.\n\n\nadminroot\n\n\nThis path specifies the base directory used for all admin requests. More specifically, this is used to hold the XSLT scripts used\n  for the web-based admin interface. The admin directory contained within the icecast distribution contains these files.\n\n\nallow-ip\n\n\nIf specified, this points to the location of a file that contains a list of IP addresses that will be allowed to connect to Icecast.\n  This could be useful in cases where a master only feeds known slaves.\n\n  The format of the file is simple, one IP per line.\n\n\ndeny-ip\n\n\nIf specified, this points to the location of a file that contains a list of IP addressess that will be dropped immediately.\n  This is mainly for problem clients when you have no access to any firewall configuration.\n\n  The format of the file is simple, one IP per line.\n\n\n\n\n\n\n\n\n\nalias\n\n\nAliases are used to provide a way to create multiple mountpoints that refer to the same mountpoint.\n\n  For example: \nalias source=\"/foo\" dest=\"/bar\"\n\n\ntls-certificate\n\n\nIf specified, this points to the location of a file that contains \nboth\n the X.509 private and public key.\n  This is required for HTTPS support to be enabled. Please note that the user Icecast is running as must be able to read the file. Failing to ensure this will cause a \"Invalid cert file\" WARN message, just as if the file wasn't there.\n\n\ntls-allowed-ciphers\n\n\nThis optional tag specifies the list of allowed ciphers passed on to the SSL library.\n  Icecast contains a set of defaults conforming to current best practices and you should \nonly\n override those, using this tag, if you know exactly what you are doing.\n\n\n\n\nLogging Settings\n\n\nlogging\n\n    \naccesslog\naccess.log\n/accesslog\n\n    \nerrorlog\nerror.log\n/errorlog\n\n    \nplaylistlog\nplaylist.log\n/playlistlog\n\n    \nloglevel\n4\n/loglevel\n \n!-- 4 Debug, 3 Info, 2 Warn, 1 Error --\n\n\n/logging\n\n\n\n\n\nThis section contains information relating to logging within Icecast. There are three logfiles currently generated by Icecast,\nan \nerror.log\n (where all log messages are placed), an \naccess.log\n (where all stream/admin/http requests are logged) and an\noptional \nplaylist.log\n.  \n\n\nNote that on non-win32 platforms, a HUP signal can be sent to Icecast in which the log files are re-opened for appending giving the ability move/remove the log files.  \n\n\nIf you set any of the filenames to a simple dash (e.g. \naccesslog\n-\n/accesslog\n) then Icecast will direct the log output to\nSTDERR instead of a file.\n\n\n\n\naccesslog\n\n\nInto this file, all requests made to the icecast2 will be logged. This file is relative to the path specified by the \nlogdir\n config value.\n\n\nerrorlog\n\n\nAll Icecast generated log messages will be written to this file. If the loglevel is set too high (Debug for instance) then\n  this file can grow fairly large over time. Currently, there is no log-rotation implemented.\n\n\nplaylistlog\n\n\nInto this file, a log of all metadata for each mountpoint will be written. The format of the logfile will most likely change over time\n  as we narrow in on a standard format for this. Currently, the file is pipe delimited. This is optional and can be removed entirely\n  from the config file.\n\n\nlogsize\n\n\nThis value specifies (in Kbytes) the maxmimum size of any of the log files. When the logfile grows beyond this value, icecast will either\n  rename it to \nlogfile.old\n, or add a timestamp to the archived file (if logarchive is enabled).\n\n\nlogarchive\n\n\nIf this value is set, then Icecast will append a timestamp to the end of the logfile name when logsize has been reached. If disabled, then\n  the default behavior is to rename the logfile to \nlogfile.old\n (overwriting any previously saved logfiles). We disable this by default to\n  prevent the filling up of filesystems for people who don't care (or know) that their logs are growing.\n\n\nloglevel\n\n\nIndicates what messages are logged by icecast. Log messages are categorized into one of 4 types, Debug, Info, Warn, and Error.  \n\n\n\n\nThe following mapping can be used to set the appropriate value:\n\n\n\n\nloglevel = \n4\n: Debug, Info, Warn, Error messages are printed\n\n\nloglevel = \n3\n: Info, Warn, Error messages are printed\n\n\nloglevel = \n2\n: Warn, Error messages are printed\n\n\nloglevel = \n1\n: Error messages only are printed\n\n\n\n\nSecurity Settings\n\n\nThis section contains configuration settings that can be used to secure the icecast server by performing a chroot to a secured location or changing user and group on start-up. The latter allows icecast to bind to priviledged ports like 80 and 443, by being started as root and then dropping to the configured user/group after binding listener-sockets.\n\n\n\n\nAttention\n\n\nThis is currently not supported on Win32.\n\n\n\n\nsecurity\n\n    \nchroot\n0\n/chroot\n\n    \nchangeowner\n\n        \nuser\nnobody\n/user\n\n        \ngroup\nnogroup\n/group\n\n    \n/changeowner\n\n\n/security\n\n\n\n\n\n\n\nchroot\n\n\nAn indicator which specifies whether a \nchroot()\n will be done when the server is started.\n  The chrooted path is specified by the \nbasedir\n configuration value.\n  Setting up and using a chroot is an advanced concept and not in the scope of this document.\n\n\nchangeowner\n\n\nThis section indicates the user and group that will own the icecast process when it is started.\n\n  These need to be valid users on the system. Icecast must be started as root for this to work.", 
            "title": "Configuration File"
        }, 
        {
            "location": "/config_file/#general-settings", 
            "text": "hostname example.org /hostname  location Moon /location  admin icemaster@example.org /admin  fileserve 1 /fileserve  server-id icecast 2.4.1 /server-id    hostname  This is the DNS name (or IP address) that will be used for the stream directory lookups or\n  possibily the playlist generation if a Host header is not provided. This should be something\n  that your listeners can use.  Note : This should not the the URL of your stream's website or so, but the hostname for this\n  Icecast server!  location  This sets the location string for this Icecast instance. It will be shown e.g on the web interface.  admin  This should contain contact details for getting in touch with the server administrator.\n  Usually this will be an email address, but as this can be an arbitrary string it could also\n  be a phone number. This will be shown e.g. on the web interface.  fileserve  This flag turns on the Icecast fileserver from which static files can be served. All files\n  are served relative to the path specified in the  webroot  configuration setting. \n  By default the setting is enabled so that requests for the static files needed by the status \n  and admin pages, such as images and CSS are retrievable.  server-id  This optional setting allows for the administrator of the server to override the default\n  server identification. The default is icecast followed by a version number. \n  It is not recommended to use this setting, unless you have very good reasons and know\n  what you are doing.", 
            "title": "General Settings"
        }, 
        {
            "location": "/config_file/#limits", 
            "text": "limits \n     clients 100 /clients \n     sources 2 /sources \n     queue-size 102400 /queue-size \n     client-timeout 30 /client-timeout \n     header-timeout 15 /header-timeout \n     source-timeout 10 /source-timeout \n     burst-on-connect 1 /burst-on-connect \n     burst-size 65536 /burst-size  /limits   This section contains server level settings. Usually only the  clients  and  sources  values\nneed to be adjusted. \nOnly modify this section if you know what you are doing.   clients  Total number of concurrent clients supported by the server. Listeners are considered clients,\n  but so are accesses to any static content (i.e. fileserved content) and also any requests to\n  gather stats. These are max concurrent connections for the entire server (not per mountpoint).  sources  Maximum number of connected sources supported by the server. This includes active relays and source clients.  queue-size  This is the maximum size (in bytes) of the stream queue. A listener may temporarily\n  lag behind due to network congestion and in this case an internal queue is maintained for the\n  listeners. If the queue grows larger than this config value, then it is truncated and any listeners\n  found will be removed from the stream. This will be the default setting for the streams which is\n  512k unless overridden here. \n  You can override this in the individual mount settings as well, which can be\n  useful if you have a mixture of high bandwidth video and low bitrate audio streams.  client-timeout  This does not seem to be used.  header-timeout  The maximum time (in seconds) to wait for a request to come in once the client has made a connection\n  to the server. In general this value should not need to be tweaked.  source-timeout  If a connected source does not send any data within this timeout period (in seconds),\n  then the source connection will be removed from the server.  burst-on-connect  This option is deprecated, use  burst-size  instead.  burst-size  The burst size is the amount of data (in bytes) to burst to a client at connection time. This is to quickly fill\n  the pre-buffer used by media players. The default is 64 kbytes which is a typical size used by most clients so changing\n  it is usually not required. This setting applies to all mountpoints unless overridden in the mount settings. Ensure that this value is smaller than queue-size, if necessary increase queue-size to be larger than your desired burst-size. Failure to do so might result in aborted listener client connection attempts, due to initial burst leading to the connection already exceeding the queue-size limit.", 
            "title": "Limits"
        }, 
        {
            "location": "/config_file/#authentication", 
            "text": "This section contains all the usernames and passwords used for administration purposes or to connect sources and relays.\nFor more information, refer to the  Authentication  Page.", 
            "title": "Authentication"
        }, 
        {
            "location": "/config_file/#yellowpage-directory-settings", 
            "text": "directory \n     yp-url-timeout 15 /yp-url-timeout \n     yp-url http://dir.xiph.org/cgi-bin/yp-cgi /yp-url  /directory   This section contains all the settings for listing a stream on any of the Icecast YP Directory servers.\nMultiple occurances of this section can be specified in order to be listed on multiple directory servers. \nFor more Information see the  Listing in a YellowPage Directory  Page.   yp-url-timeout  This value is the maximum time Icecast will wait for a response from a particular directory server.\n  The recommended value should be sufficient for most directory servers.  yp-url  The URL which Icecast uses to communicate with the Directory server.\n  The value for this setting is provided by the owner of the Directory server.", 
            "title": "YellowPage Directory Settings"
        }, 
        {
            "location": "/config_file/#tcp-port-settings", 
            "text": "The following shows how you can specify the listening settings for the server.  listen-socket \n     port 8000 /port \n     bind-address 127.0.0.1 /bind-address  /listen-socket  listen-socket \n     port 8443 /port \n     tls 1 /tls  /listen-socket  listen-socket \n     port 8004 /port \n     shoutcast-mount /live.mp3 /shoutcast-mount  /listen-socket   The first listen-socket block shows how to make Icecast listen on port 8000, and additionally specifies\na  bind-address , which limits this port to only listen for connections from this address. \nIf a bind-address is not specified for a particular listen-socket, then the socket will be bound to all\ninterfaces (including IPv6 if available). For most people, the bind-address option will not\nbe required and often confuses people.  Another possibility is to use an  ssl  boolean setting which informs Icecast that a secured\nconnection is to be used. A common use for using a secure connection would be for admin page access.  The last listen-socket block in this example shows how to defined a Shoutcast compatible port. This can\nbe done by setting the  shoutcast-mount  setting. This will implicity define a second listening socket\nwhose port number is always one higher than the port defined (because the Shoutcast protocol requires\ntwo ports) and also informs Icecast of which mountpoint the Shoutcast source client on this port will be using.   port  The TCP port that will be used to accept client connections.  bind-address  An optional IP address that can be used to bind to a specific network\n  card. If not supplied, then it will bind to all interfaces.  tls  If set to 1 will enable HTTPS on this listen-socket. Icecast must have been compiled against OpenSSL to be able to do so.  shoutcast-mount  An optional mountpoint setting to be used when Shoutcast DSP compatible clients connect. \n  Defining this within a listen-socket group tells Icecast that this port and the subsequent port are to be used for\n  Shoutcast compatible source clients.", 
            "title": "TCP Port settings"
        }, 
        {
            "location": "/config_file/#http-headers", 
            "text": "http-headers \n     header name= Access-Control-Allow-Origin  value= *  / \n     header name= X-Robots-Tag  value= index, noarchive  status= 200  /  /http-headers   Icecast can be configured to send custom HTTP headers. This is available as a global setting and inside mountpoints. This section explains the global settings.  This functionality was introduced mainly to enable the use of simplified cross-origin resource sharing. The Icecast default configuration contains the first header, as seen in the above exmple, for this reason.  \n     http-headers \n     This element is placed anywhere inside the main section of the Icecast config.\n        It will contain  header  child elements, that specify the actual headers one by one. \n\n     header \n     This tag specifies the actual header to be sent to a HTTP client in response to every request. \n        This tag can contain the following attributes:\n         \n             name \n             Specifies the HTTP header field name. (required) \n             value \n             Specifies the HTTP header field value. (required) \n             status \n             Limits sending the header to certain HTTP status codes. \n                If not specified, the default is to return the header for every HTTP status code.\n                This attribute is only available for global headers, at the moment. (optional)\n             \n         \n       At the moment only global headers will be sent in case the HTTP status is not \"200\". This is subject to change in the future.\nAvoid placing comments inside  http-headers  as, in this release, it will prevent Icecast from parsing further  header  tags.", 
            "title": "HTTP headers"
        }, 
        {
            "location": "/config_file/#relaying-streams", 
            "text": "This section contains the servers relay settings. The relays are implemented using a pull system where the receiving\nserver connects as if it's a listener to the sending server. \nThere are two types of relay setups, a \u201cMaster server relay\u201d or a \u201cSpecific Mountpoint relay.\u201d  For information about the two types and how to configure them, refer to the  Relaying  Page.", 
            "title": "Relaying Streams"
        }, 
        {
            "location": "/config_file/#mount-specific-settings", 
            "text": "mount type= normal \n     mount-name /example-complex.ogg /mount-name \n     username othersource /username \n     password hackmemore /password \n     max-listeners 1 /max-listeners \n     max-listener-duration 3600 /max-listener-duration \n     dump-file /tmp/dump-example1.ogg /dump-file \n     intro /intro.ogg /intro \n     fallback-mount /example2.ogg /fallback-mount \n     fallback-override 1 /fallback-override \n     fallback-when-full 1 /fallback-when-full \n     charset ISO8859-1 /charset \n     public 1 /public \n     stream-name My audio stream /stream-name \n     stream-description My audio description /stream-description \n     stream-url http://some.place.com /stream-url \n     genre classical /genre \n     bitrate 64 /bitrate \n     type application/ogg /type \n     subtype vorbis /subtype \n     hidden 1 /hidden \n     burst-size 65536 /burst-size \n     mp3-metadata-interval 4096 /mp3-metadata-interval \n     authentication type= xxxxxx \n             !-- See authentication documentation -- \n     /authentication \n     http-headers \n             header name= Access-Control-Allow-Origin  value= *  / \n             header name= X-Robots-Tag  value= index, noarchive  / \n             header name= foo  value= bar  status= 200  / \n             header name= Nelson  value= Ha-Ha!  status= 404  / \n     /http-headers \n     on-connect /home/icecast/bin/source-start /on-connect \n     on-disconnect /home/icecast/bin/source-end /on-disconnect  /mount   This section contains the settings which apply only to a specific mountpoint and applies to an incoming\nstream whether it is a relay or a source client. The purpose of the mount definition is to state certain\ninformation that can override either global/default settings or settings provided from the incoming stream.  A mount does not need to be stated for each incoming source although you may want to specific certain settings\nlike the maximum number of listeners or a mountpoint specific username/password. As a general rule, only define\nwhat you need to but each mount definition needs at least the mount-name. Changes to most of these will apply\nacross a configuration file re-read even on active streams, however some only apply when the stream starts or\nends.   type  The type of the mount point (default: \"normal\"). A mount of type \"default\"\n  can be used to specify common values for multiple mountpoints. \n  Note that default mountpoints won't merge with other mount blocks.\n  You only get those values if no  type=\"normal\"  mount block exists\n  corresponding to your mountpoint.  mount-name  The name of the mount point for which these settings apply.\n  MUST NOT be used in case of mount type \"default\".     username  An optional value which will set the username that a source must use to connect using this mountpoint.\n  Do not set this value unless you are sure that the source clients connecting to the mount point can be\n  configured to send a username other than  source . \n  If this value is not present the default username is  source .     password  An optional value which will set the password that a source must use to connect using this mountpoint.\n  There is also a  URL based authentication method  for sources that can be used instead.  max-listeners  An optional value which will set the maximum number of listeners that can be attached to this mountpoint.  max-listener-duration  An optional value which will set the length of time a listener will stay connected to the stream. \n  An auth component may override this.  dump-file  An optional value which will set the filename which will be a dump of the stream coming through \n  on this mountpoint. This filename is processed with strftime(3). This allows to use variables like  %F .  intro  An optional value which will specify the file those contents will be sent to new listeners when they\n  connect but before the normal stream is sent. Make sure the format of the file specified matches the\n  streaming format. The specified file is appended to webroot before being opened.  fallback-mount  This optional value specifies a mountpoint that clients are automatically moved\n  to if the source shuts down or is not streaming at the time a listener connects. Only one can be\n  listed in each mount and should refer to another mountpoint on the same server that is streaming in\n  the same streaming format. \n  If clients cannot fallback to another mountpoint, due to a missing\n  fallback-mount or it states a mountpoint that is just not available, then those clients will be\n  disconnected. If clients are falling back to a mountpoint and the fallback-mount is not actively\n  streaming but defines a fallback-mount itself then those clients may be moved there instead. This\n  multi-level fallback allows clients to cascade several mountpoints. \n  A fallback mount can also state a file that is located in webroot. This is useful for playing a\n  pre-recorded file in the case of a stream going down. It will repeat until either the listener\n  disconnects or a stream comes back available and takes the listeners back. As per usual, the file\n  format should match the stream format, failing to do so may cause problems with playback. \n  Note that the fallback file is not timed so be careful if you intend to relay this. They are fine\n  on slave streams but don't use them on master streams, if you do then the relay will consume stream\n  data at a faster rate and the listeners on the relay would eventually get kicked off.  fallback-override  When enabled, this allows a connecting source client or relay on this mountpoint to move listening\n  clients back from the fallback mount.  fallback-when-full  When set to  1 , this will cause new listeners, when the max listener count for the mountpoint has\n  been reached, to move to the fallback mount if there is one specified.  charset  For non-Ogg streams like MP3, the metadata that is inserted into the stream often has no defined character set.\n  We have traditionally assumed UTF8 as it allows for multiple language sets on the web pages and stream directory,\n  however many source clients for MP3 type streams have assumed Latin1 (ISO 8859-1) or leave it to whatever character\n  set is in use on the source client system. \n  This character mismatch has been known to cause a problem as the stats engine and stream directory servers want UTF8\n  so now we assume Latin1 for non-Ogg streams (to handle the common case) but you can specify an alternative character\n  set with this option. \n  The source clients can also specify a  charset=  parameter to the metadata update URL if they so wish.  public  The default setting for this is  -1  indicating that it is up to the source client or relay to determine if this mountpoint\n  should advertise. A setting of  0  will prevent any advertising and a setting of  1  will force it to advertise. \n  If you do force advertising you may need to set other settings listed below as the YP server can refuse to advertise\n  if there is not enough information provided.  stream-name  Setting this will add the specified name to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one.  stream-description  Setting this will add the specified description to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one.  stream-url  Setting this will add the specified URL to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one. \n  The URL is generally for directing people to a website.  genre  Setting this will add the specified genre to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one. \n  This can be anything be using certain key words can help searches in the YP directories.  bitrate  Setting this will add the specified bitrate to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one. \n  This is stated in kbps.  type  Setting this will add the specified mime type to the stats (and therefore YP) for this mountpoint even if the source client/relay provide one. \n  It is very unlikely that this will be needed.  subtype  Setting this will add the specified subtype to the stats (and therefore YP) for this mountpoint.\n  The subtype is really to help the YP server to identify the components of the type.\n  An example setting is vorbis/theora do indicate the codecs in an Ogg stream  burst-size  This optional setting allows for providing a burst size which overrides the default burst size as defined in limits. \n  The value is in bytes.  mp3-metadata-interval  This optional setting specifies what interval, in bytes, there is between metadata updates within shoutcast compatible streams.\n  This only applies to new listeners connecting on this mountpoint, not existing listeners falling back to this mountpoint. The\n  default is either the hardcoded server default or the value passed from a relay.  hidden  Enable this to prevent this mount from being shown on the xsl pages. This is mainly for cases where a local relay is configured\n  and you do not want the source of the local relay to be shown.     authentication  This specifies that the named mount point will require listener (or source) authentication. Currently, we support a file-based\n  authentication scheme ( type=htpasswd ) and URL based authentication request forwarding. A mountpoint configured with an authenticator\n  will display a red key next to the mount point name on the admin screens. \n  You can read more about authentication and URL based source authentication  here .  http-headers  This element is placed anywhere inside the mount section of the icecast config. It will contain  header  child elements, that specify the actual HTTP headers one by one.  header  This tag specifies the actual header to be sent to a HTTP client in response to every request for this mount point, but currently only if the HTTP status code is \"200\".\n  This tag can contain the following attributes:    name  is required and its value specifies the HTTP header field name.  value  is required and its value specifies the HTTP header field value.    on-connect  State a program that is run when the source is started. It is passed a parameter which is the name of the mountpoint that is starting.\n  The processing of the stream does not wait for the script to end.\n  Caution should be exercised as there is a small chance of stream file descriptors being mixed up with script file descriptors, if the FD numbers go above 1024. This will be further addressed in the next Icecast release.\n   This option is not available on Win32  on-disconnect  State a program that is run when the source ends. It is passed a parameter which is the name of the mountpoint that has ended.\n  The processing of the stream does not wait for the script to end. \n  Caution should be exercised as there is a small chance of stream file descriptors being mixed up with script file descriptors, if the FD numbers go above 1024. This will be further addressed in the next Icecast release.\n   This option is not available on Win32", 
            "title": "Mount Specific Settings"
        }, 
        {
            "location": "/config_file/#path-settings", 
            "text": "paths \n     basedir ./ /basedir \n     logdir ./logs /logdir \n     pidfile ./icecast.pid /pidfile \n     webroot ./web /webroot \n     adminroot ./admin /adminroot \n     allow-ip /path/to/ip_allowlist /allow-ip \n     deny-ip /path_to_ip_denylist /deny-ip \n     tls-certificate /path/to/certificate.pem /tls-certificate \n     ssl-allowed-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS /ssl-allowed-ciphers \n     alias source= /foo  dest= /bar /  /paths   This section contains paths which are used for various things within icecast. All paths (other than any aliases) should not end in a  / .   basedir  This path is used in conjunction with the chroot settings, and specifies the base directory that is chrooted to when the server is started.  This feature is not supported on Win32.  logdir  This path specifies the base directory used for logging. Both the  error.log  and  access.log  will be created relative to this directory.  pidfile  This pathname specifies the file to write at startup and to remove at normal shutdown. The file contains the process id of the icecast process. \n  This could be read and used for sending signals to Icecast.  webroot  This path specifies the base directory used for all static file requests. This directory can contain all standard file types\n  (including mp3s and ogg vorbis files). For example, if webroot is set to  /var/share/icecast2 , and a request for\n   http://server:port/mp3/stuff.mp3  comes in, then the file  /var/share/icecast2/mp3/stuff.mp3  will be served.  adminroot  This path specifies the base directory used for all admin requests. More specifically, this is used to hold the XSLT scripts used\n  for the web-based admin interface. The admin directory contained within the icecast distribution contains these files.  allow-ip  If specified, this points to the location of a file that contains a list of IP addresses that will be allowed to connect to Icecast.\n  This could be useful in cases where a master only feeds known slaves. \n  The format of the file is simple, one IP per line.  deny-ip  If specified, this points to the location of a file that contains a list of IP addressess that will be dropped immediately.\n  This is mainly for problem clients when you have no access to any firewall configuration. \n  The format of the file is simple, one IP per line.     alias  Aliases are used to provide a way to create multiple mountpoints that refer to the same mountpoint. \n  For example:  alias source=\"/foo\" dest=\"/bar\"  tls-certificate  If specified, this points to the location of a file that contains  both  the X.509 private and public key.\n  This is required for HTTPS support to be enabled. Please note that the user Icecast is running as must be able to read the file. Failing to ensure this will cause a \"Invalid cert file\" WARN message, just as if the file wasn't there.  tls-allowed-ciphers  This optional tag specifies the list of allowed ciphers passed on to the SSL library.\n  Icecast contains a set of defaults conforming to current best practices and you should  only  override those, using this tag, if you know exactly what you are doing.", 
            "title": "Path Settings"
        }, 
        {
            "location": "/config_file/#logging-settings", 
            "text": "logging \n     accesslog access.log /accesslog \n     errorlog error.log /errorlog \n     playlistlog playlist.log /playlistlog \n     loglevel 4 /loglevel   !-- 4 Debug, 3 Info, 2 Warn, 1 Error --  /logging   This section contains information relating to logging within Icecast. There are three logfiles currently generated by Icecast,\nan  error.log  (where all log messages are placed), an  access.log  (where all stream/admin/http requests are logged) and an\noptional  playlist.log .    Note that on non-win32 platforms, a HUP signal can be sent to Icecast in which the log files are re-opened for appending giving the ability move/remove the log files.    If you set any of the filenames to a simple dash (e.g.  accesslog - /accesslog ) then Icecast will direct the log output to\nSTDERR instead of a file.   accesslog  Into this file, all requests made to the icecast2 will be logged. This file is relative to the path specified by the  logdir  config value.  errorlog  All Icecast generated log messages will be written to this file. If the loglevel is set too high (Debug for instance) then\n  this file can grow fairly large over time. Currently, there is no log-rotation implemented.  playlistlog  Into this file, a log of all metadata for each mountpoint will be written. The format of the logfile will most likely change over time\n  as we narrow in on a standard format for this. Currently, the file is pipe delimited. This is optional and can be removed entirely\n  from the config file.  logsize  This value specifies (in Kbytes) the maxmimum size of any of the log files. When the logfile grows beyond this value, icecast will either\n  rename it to  logfile.old , or add a timestamp to the archived file (if logarchive is enabled).  logarchive  If this value is set, then Icecast will append a timestamp to the end of the logfile name when logsize has been reached. If disabled, then\n  the default behavior is to rename the logfile to  logfile.old  (overwriting any previously saved logfiles). We disable this by default to\n  prevent the filling up of filesystems for people who don't care (or know) that their logs are growing.  loglevel  Indicates what messages are logged by icecast. Log messages are categorized into one of 4 types, Debug, Info, Warn, and Error.     The following mapping can be used to set the appropriate value:   loglevel =  4 : Debug, Info, Warn, Error messages are printed  loglevel =  3 : Info, Warn, Error messages are printed  loglevel =  2 : Warn, Error messages are printed  loglevel =  1 : Error messages only are printed", 
            "title": "Logging Settings"
        }, 
        {
            "location": "/config_file/#security-settings", 
            "text": "This section contains configuration settings that can be used to secure the icecast server by performing a chroot to a secured location or changing user and group on start-up. The latter allows icecast to bind to priviledged ports like 80 and 443, by being started as root and then dropping to the configured user/group after binding listener-sockets.   Attention  This is currently not supported on Win32.   security \n     chroot 0 /chroot \n     changeowner \n         user nobody /user \n         group nogroup /group \n     /changeowner  /security    chroot  An indicator which specifies whether a  chroot()  will be done when the server is started.\n  The chrooted path is specified by the  basedir  configuration value.\n  Setting up and using a chroot is an advanced concept and not in the scope of this document.  changeowner  This section indicates the user and group that will own the icecast process when it is started. \n  These need to be valid users on the system. Icecast must be started as root for this to work.", 
            "title": "Security Settings"
        }, 
        {
            "location": "/server_stats/", 
            "text": "Icecast provides extensive run time statistics. Both in the form of active connection numbers and cumulative\ncounters (since server startup or respectively source connection startup).\n\n\nHTML Interface\n\n\nIcecast comes with a HTML web interface, it exposes a basic set of server statistics that should\nfulfil basic user needs. Icecast uses the very powerful libxslt engine to transform its internal\nraw statistical data into custom tailored interfaces.\n\nMany people have written custom XSLT code that produces e.g. plain text \u201cnow playing\u201d, XSPF, VCLT,\nmunin interface data, etc. If so desired, the files in webroot can be customized to contain more or less\ninformation (see section on raw XML data below).\n\n\n\n\nAttention\n\n\nWe strongly discourage attempts to scrape data from the web interface\n as we do not consider this an\nAPI and will change it, even completely, between versions! The preferred ways are custom XSLT, JSON and raw XML.\n\n\n\n\nJSON Stats\n\n\nSince version 2.4.0 Icecast includes a basic JSON endpoint (\n/status-json.xsl\n) based on a xml2json template by Doeke Zanstra\n(see \nxml2json.xslt\n). It exposes the same set of server statistics that are available through the web interface and\nshould fulfil basic user needs. The intention is to not break backwards compatibility of this interface in the future, \nstill we recommend to design robust software that can deal with possible changes like addition or removal of variables.\nAlso note that not all variables are available all the time and availability may change at runtime due to stream type, etc.\n\n\nAvailable XML data\n\n\nThis section contains information about the raw XML server statistics data available inside Icecast. An example\nstats XML tree will be shown and each element will be described. The following example stats tree will be used:  \n\n\nicestats\n\n    \nadmin\nicemaster@localhost\n/admin\n\n    \nclient_connections\n649\n/client_connections\n\n    \nclients\n2\n/clients\n\n    \nconnections\n907\n/connections\n\n    \nfile_connections\n379\n/file_connections\n\n    \nhost\nlocalhost\n/host\n\n    \nlistener_connections\n90\n/listener_connections\n\n    \nlisteners\n0\n/listeners\n\n    \nlocation\nEarth\n/location\n\n    \nserver_id\nIcecast 2.5\n/server_id\n\n    \nsource_client_connections\n164\n/source_client_connections\n\n    \nsource_relay_connections\n0\n/source_relay_connections\n\n    \nsource_total_connections\n164\n/source_total_connections\n\n    \nsources\n2\n/sources\n\n    \nstats\n0\n/stats\n\n    \nstats_connections\n0\n/stats_connections\n\n    \nsource mount=\n/audio.ogg\n\n        \ntitle\nAll that she wants\n/title\n\n        \nartist\nAce of Base\n/artist\n\n        \naudio_bitrate\n499821\n/audio_bitrate\n\n        \naudio_channels\n2\n/audio_channels\n\n        \naudio_info\nsamplerate=44100;quality=10%2e0;channels=2\n/audio_info\n\n        \naudio_samplerate\n44100\n/audio_samplerate\n\n        \nchannels\n2\n/channels\n\n        \ngenre\nvarious\n/genre\n\n        \nice-bitrate\n499\n/ice-bitrate\n\n        \nlistener_peak\n0\n/listener_peak\n\n        \nlisteners\n0\n/listeners\n\n        \nlistenurl\nhttp://localhost:8000/audio\n/listenurl\n\n        \nmax_listeners\nunlimited\n/max_listeners\n\n        \npublic\n1\n/public\n\n        \nquality\n10.0\n/quality\n\n        \nsamplerate\n44100\n/samplerate\n\n        \nserver_description\nTeststream\n/server_description\n\n        \nserver_name\nGreat audio stream\n/server_name\n\n        \nserver_type\napplication/ogg\n/server_type\n\n        \nserver_url\nhttp://example.org/\n/server_url\n\n        \nslow_listeners\n0\n/slow_listeners\n\n        \nsource_ip\n192.0.2.21\n/source_ip\n\n        \nsubtype\nVorbis\n/subtype\n\n        \ntotal_bytes_read\n3372153\n/total_bytes_read\n\n        \ntotal_bytes_sent\n0\n/total_bytes_sent\n\n        \nuser_agent\nLadioCast/0.10.5 libshout/2.3.1\n/user_agent\n\n    \n/source\n\n    \nsource mount=\n/video.ogg\n\n        \naudio_bitrate\n276000\n/audio_bitrate\n\n        \naudio_channels\n6\n/audio_channels\n\n        \naudio_samplerate\n48000\n/audio_samplerate\n\n        \nframe_rate\n25.00\n/frame_rate\n\n        \nframe_size\n720 x 576\n/frame_size\n\n        \ngenre\nvarious\n/genre\n\n        \nice-bitrate\n276\n/ice-bitrate\n\n        \nlistener_peak\n0\n/listener_peak\n\n        \nlisteners\n0\n/listeners\n\n        \nlistenurl\nhttp://localhost:8000/video\n/listenurl\n\n        \nmax_listeners\nunlimited\n/max_listeners\n\n        \npublic\n0\n/public\n\n        \nserver_description\nUnspecified description\n/server_description\n\n        \nserver_name\nUnspecified name\n/server_name\n\n        \nserver_type\nvideo/ogg\n/server_type\n\n        \nslow_listeners\n0\n/slow_listeners\n\n        \nsource_ip\n192.0.2.21\n/source_ip\n\n        \nsubtype\nVorbis/Theora\n/subtype\n\n        \ntitle\nERAGON\n/title\n\n        \ntotal_bytes_read\n37136\n/total_bytes_read\n\n        \ntotal_bytes_sent\n0\n/total_bytes_sent\n\n        \nuser_agent\nLavf/55.20.0\n/user_agent\n\n        \nvideo_bitrate\n200000\n/video_bitrate\n\n        \nvideo_quality\n0\n/video_quality\n\n    \n/source\n\n\n/icestats\n\n\n\n\n\nGeneral Statistics\n\n\n\n\n\n\n\nadmin\n\n\nAs set in the server config, this should contain contact details for getting in touch with the server administrator.\n  Usually this will be an email address, but as this can be an arbitrary string it could also be a phone number.\n\n\nclient_connections\n\n\nClient connections are basically anything that is not a source connection. These include listeners (not concurrent,\n  but cumulative), any admin function accesses, and any static content (file serving) accesses.\n\n\nThis is an accumulating counter.\n\n\nclients\n\n\nNumber of currently active client connections.\n\n\nconnections\n\n\nThe total of all inbound TCP connections since start-up.\n\n\nThis is an accumulating counter.\n\n\nfile_connections\n\n\nThis is an accumulating counter.\n\n\nhost\n\n\nAs set in the server config, this should be the full DNS resolveable name or FQDN for the host on which this\n  Icecast instance is running.\n\n\nlistener_connections\n\n\nNumber of listener connections to mount points.\n\n\nThis is an accumulating counter.\n\n\nlisteners\n\n\nNumber of currently active listener connections.\n\n\nlocation\n\n\nAs set in the server config, this is a free form field that should describe e.g. the physical location of this server.\n\n\nserver_id\n\n\nDefaults to the version string of the currently running Icecast server. While not recommended it can be overriden in\n  the server config.\n\n\nserver_start_iso8601\n\n\nTimestamp of server startup in ISO 8601 date format.\n\n\nserver_start\n\n\nTimestamp of server startup in RFC 2822 date format. This field is deprecated and may be removed in a future version,\n  please use \nserver_start_iso8601\n instead.\n\n\nsource_client_connections\n\n\nSource client connections are the number of times (cumulative since start-up, not just currently connected) a source\n  client has connected to Icecast.\n\n\nThis is an accumulating counter.\n\n\nsource_relay_connections\n\n\nNumber of outbound relay connections to (master) icecast servers.\n\n\nThis is an accumulating counter.\n\n\nsource_total_connections\n\n\nBoth clients and relays.\n\n\nThis is an accumulating counter.\n\n\nsources\n\n\nThe total of currently connected sources.\n\n\nstats\n\n\nThe total of currently connected STATS clients.\n\n\nstats_connections\n\n\nNumber of times a stats client has connected to Icecast.\n\n\nThis is an accumulating counter.\n \n\n\n\n\nSource-specific Statistics\n\n\nPlease note that the statistics are valid within the scope of the current source connection.\n\nA reconnect or disconnection will reset those.  \n\n\n\n\nartist\n\n\nArtist of the current song\n\n\nMetadata set by source client\n\n\ntitle\n\n\nTitle of the current song\n\n\nMetadata set by source client\n\n\naudio_bitrate\n\n\nAudio bitrate in bits/s\n\n\nCan be set by source client\n\n\naudio_channels\n\n\nNumber of audio channels.\n\n\naudio-info\n\n\nInformation about the bitrate/samplerate/quality of the stream.\n  Also used for YP entries.\n\n\nMetadata set by source client\n\n  Example:\n\n\nsamplerate=44100;quality=10%2e0;channels=2\n (LadioCast)\n\n\nice-bitrate=128;ice-channels=2;ice-samplerate=44100\n (Butt)\n\n\nice-bitrate\n\n\nInformation about the audio bitrate (in kbit/s) of the stream.\n\n\nCan be set by source client\n\n\nsamplerate\n\n\nInformation about the samplerate of the stream.\n\n\nCan be set by source client\n\n\nquality\n\n\nInformation about the audio quality of the stream.\n\n\nMetadata set by source client\n\n\nframe_rate\n\n\nInformation about the framerate of the stream.\n\n\nOnly present for video streams\n\n\nframe_size\n\n\nInformation about the frame size of the stream.\n\n\nOnly present for video streams\n\n\nvideo_bitrate\n\n\nInformation about the video bitrate of the stream.\n\n\nOnly present for video streams\n\n\nvideo_quality\n\n\nInformation about the video quality of the stream.\n\n\nOnly present for video streams\n\n\nserver_name\n\n\nStream name\n\n\nMetadata set by source client\n\n\nserver_description\n\n\nStream description\n\n\nMetadata set by source client\n\n\nserver_type\n\n\nMIME-type for the stream currently active on this mountpoint.\n\n\nsubtype\n\n\nMIME-subtype, can be e.g. codecs like Opus, Vorbis, Theora.\n\n  Separated with \n/\n.\n\n\nlistener_peak\n\n\nPeak concurrent number of listener connections for this mountpoint.\n\n\nlisteners\n\n\nThe number of currently connected listeners.\n\n\nlistenurl\n\n\nURL to this mountpoint. (This is not aware of aliases)\n\n\nmax_listeners\n\n\nMaximum number of listeners permitted to concurrently connect to this mountpoint.\n\n\npublic\n\n\nFlag that indicates whether this mount is to be listed on a YP.\n\n\nSet by source client, can be overriden by server config\n\n\nslow_listeners\n\n\nNumber of slow listeners\n\n\nsource_ip\n\n\nIP address of the currently connected source client.\n\n  In case of relays the content of \nserver\n.\n\n\nstream_start_iso8601\n\n\nTimestamp of when the currently active source client connected to this mount point in ISO 8601 date format.\n\n\nstream_start\n\n\nTimestamp of when the currently active source client connected to this mount point in RFC 2822 date format.\n  This field is deprecated and may be removed in a future version, please use \nstream_start_iso8601\n instead.\n\n\ntotal_bytes_read\n\n\nTotal number of bytes received from the source client.\n\n\ntotal_bytes_sent\n\n\nTotal number of bytes sent to all listener connections since last source connect.\n\n\nuser_agent\n\n\nHTTP user agent string as sent by the source client.\n\n\n\n\nAdditional data can be accessed through the admin interface, as every page of the admin\ninterface has an XML equivalent.", 
            "title": "Server Statistics"
        }, 
        {
            "location": "/server_stats/#html-interface", 
            "text": "Icecast comes with a HTML web interface, it exposes a basic set of server statistics that should\nfulfil basic user needs. Icecast uses the very powerful libxslt engine to transform its internal\nraw statistical data into custom tailored interfaces. \nMany people have written custom XSLT code that produces e.g. plain text \u201cnow playing\u201d, XSPF, VCLT,\nmunin interface data, etc. If so desired, the files in webroot can be customized to contain more or less\ninformation (see section on raw XML data below).   Attention  We strongly discourage attempts to scrape data from the web interface  as we do not consider this an\nAPI and will change it, even completely, between versions! The preferred ways are custom XSLT, JSON and raw XML.", 
            "title": "HTML Interface"
        }, 
        {
            "location": "/server_stats/#json-stats", 
            "text": "Since version 2.4.0 Icecast includes a basic JSON endpoint ( /status-json.xsl ) based on a xml2json template by Doeke Zanstra\n(see  xml2json.xslt ). It exposes the same set of server statistics that are available through the web interface and\nshould fulfil basic user needs. The intention is to not break backwards compatibility of this interface in the future, \nstill we recommend to design robust software that can deal with possible changes like addition or removal of variables.\nAlso note that not all variables are available all the time and availability may change at runtime due to stream type, etc.", 
            "title": "JSON Stats"
        }, 
        {
            "location": "/server_stats/#available-xml-data", 
            "text": "This section contains information about the raw XML server statistics data available inside Icecast. An example\nstats XML tree will be shown and each element will be described. The following example stats tree will be used:    icestats \n     admin icemaster@localhost /admin \n     client_connections 649 /client_connections \n     clients 2 /clients \n     connections 907 /connections \n     file_connections 379 /file_connections \n     host localhost /host \n     listener_connections 90 /listener_connections \n     listeners 0 /listeners \n     location Earth /location \n     server_id Icecast 2.5 /server_id \n     source_client_connections 164 /source_client_connections \n     source_relay_connections 0 /source_relay_connections \n     source_total_connections 164 /source_total_connections \n     sources 2 /sources \n     stats 0 /stats \n     stats_connections 0 /stats_connections \n     source mount= /audio.ogg \n         title All that she wants /title \n         artist Ace of Base /artist \n         audio_bitrate 499821 /audio_bitrate \n         audio_channels 2 /audio_channels \n         audio_info samplerate=44100;quality=10%2e0;channels=2 /audio_info \n         audio_samplerate 44100 /audio_samplerate \n         channels 2 /channels \n         genre various /genre \n         ice-bitrate 499 /ice-bitrate \n         listener_peak 0 /listener_peak \n         listeners 0 /listeners \n         listenurl http://localhost:8000/audio /listenurl \n         max_listeners unlimited /max_listeners \n         public 1 /public \n         quality 10.0 /quality \n         samplerate 44100 /samplerate \n         server_description Teststream /server_description \n         server_name Great audio stream /server_name \n         server_type application/ogg /server_type \n         server_url http://example.org/ /server_url \n         slow_listeners 0 /slow_listeners \n         source_ip 192.0.2.21 /source_ip \n         subtype Vorbis /subtype \n         total_bytes_read 3372153 /total_bytes_read \n         total_bytes_sent 0 /total_bytes_sent \n         user_agent LadioCast/0.10.5 libshout/2.3.1 /user_agent \n     /source \n     source mount= /video.ogg \n         audio_bitrate 276000 /audio_bitrate \n         audio_channels 6 /audio_channels \n         audio_samplerate 48000 /audio_samplerate \n         frame_rate 25.00 /frame_rate \n         frame_size 720 x 576 /frame_size \n         genre various /genre \n         ice-bitrate 276 /ice-bitrate \n         listener_peak 0 /listener_peak \n         listeners 0 /listeners \n         listenurl http://localhost:8000/video /listenurl \n         max_listeners unlimited /max_listeners \n         public 0 /public \n         server_description Unspecified description /server_description \n         server_name Unspecified name /server_name \n         server_type video/ogg /server_type \n         slow_listeners 0 /slow_listeners \n         source_ip 192.0.2.21 /source_ip \n         subtype Vorbis/Theora /subtype \n         title ERAGON /title \n         total_bytes_read 37136 /total_bytes_read \n         total_bytes_sent 0 /total_bytes_sent \n         user_agent Lavf/55.20.0 /user_agent \n         video_bitrate 200000 /video_bitrate \n         video_quality 0 /video_quality \n     /source  /icestats", 
            "title": "Available XML data"
        }, 
        {
            "location": "/server_stats/#general-statistics", 
            "text": "admin  As set in the server config, this should contain contact details for getting in touch with the server administrator.\n  Usually this will be an email address, but as this can be an arbitrary string it could also be a phone number.  client_connections  Client connections are basically anything that is not a source connection. These include listeners (not concurrent,\n  but cumulative), any admin function accesses, and any static content (file serving) accesses.  This is an accumulating counter.  clients  Number of currently active client connections.  connections  The total of all inbound TCP connections since start-up.  This is an accumulating counter.  file_connections  This is an accumulating counter.  host  As set in the server config, this should be the full DNS resolveable name or FQDN for the host on which this\n  Icecast instance is running.  listener_connections  Number of listener connections to mount points.  This is an accumulating counter.  listeners  Number of currently active listener connections.  location  As set in the server config, this is a free form field that should describe e.g. the physical location of this server.  server_id  Defaults to the version string of the currently running Icecast server. While not recommended it can be overriden in\n  the server config.  server_start_iso8601  Timestamp of server startup in ISO 8601 date format.  server_start  Timestamp of server startup in RFC 2822 date format. This field is deprecated and may be removed in a future version,\n  please use  server_start_iso8601  instead.  source_client_connections  Source client connections are the number of times (cumulative since start-up, not just currently connected) a source\n  client has connected to Icecast.  This is an accumulating counter.  source_relay_connections  Number of outbound relay connections to (master) icecast servers.  This is an accumulating counter.  source_total_connections  Both clients and relays.  This is an accumulating counter.  sources  The total of currently connected sources.  stats  The total of currently connected STATS clients.  stats_connections  Number of times a stats client has connected to Icecast.  This is an accumulating counter.", 
            "title": "General Statistics"
        }, 
        {
            "location": "/server_stats/#source-specific-statistics", 
            "text": "Please note that the statistics are valid within the scope of the current source connection. \nA reconnect or disconnection will reset those.     artist  Artist of the current song  Metadata set by source client  title  Title of the current song  Metadata set by source client  audio_bitrate  Audio bitrate in bits/s  Can be set by source client  audio_channels  Number of audio channels.  audio-info  Information about the bitrate/samplerate/quality of the stream.\n  Also used for YP entries.  Metadata set by source client \n  Example:  samplerate=44100;quality=10%2e0;channels=2  (LadioCast)  ice-bitrate=128;ice-channels=2;ice-samplerate=44100  (Butt)  ice-bitrate  Information about the audio bitrate (in kbit/s) of the stream.  Can be set by source client  samplerate  Information about the samplerate of the stream.  Can be set by source client  quality  Information about the audio quality of the stream.  Metadata set by source client  frame_rate  Information about the framerate of the stream.  Only present for video streams  frame_size  Information about the frame size of the stream.  Only present for video streams  video_bitrate  Information about the video bitrate of the stream.  Only present for video streams  video_quality  Information about the video quality of the stream.  Only present for video streams  server_name  Stream name  Metadata set by source client  server_description  Stream description  Metadata set by source client  server_type  MIME-type for the stream currently active on this mountpoint.  subtype  MIME-subtype, can be e.g. codecs like Opus, Vorbis, Theora. \n  Separated with  / .  listener_peak  Peak concurrent number of listener connections for this mountpoint.  listeners  The number of currently connected listeners.  listenurl  URL to this mountpoint. (This is not aware of aliases)  max_listeners  Maximum number of listeners permitted to concurrently connect to this mountpoint.  public  Flag that indicates whether this mount is to be listed on a YP.  Set by source client, can be overriden by server config  slow_listeners  Number of slow listeners  source_ip  IP address of the currently connected source client. \n  In case of relays the content of  server .  stream_start_iso8601  Timestamp of when the currently active source client connected to this mount point in ISO 8601 date format.  stream_start  Timestamp of when the currently active source client connected to this mount point in RFC 2822 date format.\n  This field is deprecated and may be removed in a future version, please use  stream_start_iso8601  instead.  total_bytes_read  Total number of bytes received from the source client.  total_bytes_sent  Total number of bytes sent to all listener connections since last source connect.  user_agent  HTTP user agent string as sent by the source client.   Additional data can be accessed through the admin interface, as every page of the admin\ninterface has an XML equivalent.", 
            "title": "Source-specific Statistics"
        }, 
        {
            "location": "/auth/", 
            "text": "Listener Authentication\n\n\nListener authentication is a feature of Icecast which allows you to secure a certain mountpoint such that in order to listen,\na listener must pass some verification test. With this feature, a simple pay-for-play operation (eg. user/pass), or some filtering\nbased on the listener connection can be performed. This section will show you the basics of setting up and maintaining this component.  \n\n\nTo define listener authentication, a group of tags are specified in the \nmount\n group relating to the mountpoint. This means\nthat authentication can apply to listeners of source clients or relays.  \n\n\nThe following authentication mechanisms can apply to listeners:\n\n\n\n\n\n\n\nhtpasswd: lookup a named file for a matching username and password\n\n\nURL: issue web requests (eg. PHP) to match authentication\n\n\n\n\nThe listener authentication within a specified mount in the icecast XML configuration can apply to either to a stream from a\nsource client, relay or a webroot based file. They do apply to intro files or fallback streams.\n\n\nhtpasswd Listener Authentication\n\n\nIn order to use listener authentication, you \nmust\n configure a mount specific option. This means that you have to provide\na \nmount\n section in the main icecast config file. The following is an example:\n\n\n\n\n\nmount\n\n    \nmount-name\n/example.ogg\n/mount-name\n\n    \nauthentication type=\nhtpasswd\n\n        \noption name=\nfilename\n value=\nmyauth\n/\n\n        \noption name=\nallow_duplicate_users\n value=\n0\n/\n\n    \n/authentication\n\n\n/mount\n\n\n\n\n\nTo support listener authentication you \nmust\n provide at a minimum \nmount-name\n and \nauthentication\n.\n\nThe \nmount-name\n is the name of the mountpoint that you will use to connect your source client with and \nauthentication\n configures\nwhat type of Icecast authenticator to use.\n\nCurrently, only \nhtpasswd\n and \nurl\n are implemented. Each authenticator has a variable number of options that are required and\nthese are specified as shown in the example.\n\nThe htpasswd authenticator requires a few parameters:\n\nThe first, \nfilename\n, specifies the name of the file to use to store users and passwords. Note that this file need not exist\n(and probably will not exist when you first set it up).\n\nIcecast has built-in support for managing users and passwords via the web admin interface. More on this later in this section.\n\nThe second option, \nallow_duplicate_users\n, if set to \n0\n, will prevent multiple connections using the same username. Setting this\nvalue to \n1\n will enable mutltiple connections from the same username on a given mountpoint.\n\nNote there is no way to specify a \u201cmax connections\u201d for a particular user.  \n\n\nIcecast supports a mixture of streams that require listener authentication and those that do not.\n\n\nConfiguring Users and Passwords\n\n\nOnce the appropriate entries are made to the config file, connect your source client (using the mountpoint you named in\nthe config file). To configure users and passwords for this stream you must use the web-based admin interface. Navigate to\n\nhttp://server:ip/admin/stats.xsl\n to begin. If you have configured everything properly, you should see a screen like the\nfollowing:\n\n\n\n\nYou will see a lock in front of all mountpoint configured for listener authentication. Also note that this page will\nonly show \nconnected\n mountpoints.\n\n\nTo manage users and passwords for this mountpoint, click on the \u201cManage Authentication\u201d link. The following screen will be shown:\n\n\n\n\nThis screen will show all the users configured for this mountpoint. Adding users is as simple as entering a username and password\nin the fields and clicking \u201cAdd\u201d.\n\nNote that usernames \nmust\n be unique and there are \nno\n restrictions on passwords. You can delete users by clicking the appropriate\ndelete link next to each user.\n\n\nFinishing it all off\n\n\nOk, so you've created your users, and you have everything setup properly, how do your users login? Well, we've provided a simple login\nform that you can use for this purpose. This page (\nhttp://server:port/auth.xsl\n) will bring up a form that users can use to enter their\nusername and password.\n\n\n\n\nThis page will serve a m3u with the username and password and in most cases should open the correct media player and begin playing\nyour stream.\n\n\nURL\n\n\nAuthenticating listeners via the URL method involves Icecast, when a listener connects, issuing requests to a web server\nand checking the response headers. If a certain header is sent back then the listener connecting is allowed to continue,\nif not, an error is sent back to the listener.  \n\n\nThe URLs specified will invoke some web server scripts like PHP to do any work that they may choose to do. All that is\nrequired of the scripting language is that POST information can be handled and response headers can be sent back.\n\nlibcurl is used for the requesting so https connections may be possible, but be aware of the extra overhead involved.  \n\n\nThe useragent sent in each curl request will represent the Icecast server version. The response headers will depend on\nwhether the listener is to be accepted. In the case of rejection, a response header\n\n\nIcecast-Auth-Message: Reason\n\nshould also be returned for placing in the log files.  \n\n\nIn order to use URL based listener authentication, you \nmust\n configure a mount specific option. This means that you\nhave to provide a \nmount\n section in the main Icecast config file. The following shows the list of options available:  \n\n\n\n\n\nmount\n\n    \nmount-name\n/example.ogg\n/mount-name\n\n    \nauthentication type=\nurl\n\n        \noption name=\nmount_add\n value=\nhttp://auth.example.org/stream_start.php\n/\n\n        \noption name=\nmount_remove\n value=\nhttp://auth.example.org/stream_end.php\n/\n\n        \noption name=\nlistener_add\n value=\nhttp://auth.example.org/listener_joined.php\n/\n\n        \noption name=\nlistener_remove\n value=\nhttp://auth.example.org/listener_left.php\n/\n\n        \noption name=\nusername\n value=\nuser\n/\n\n        \noption name=\npassword\n value=\npass\n/\n\n        \noption name=\nauth_header\n value=\nicecast-auth-user: 1\n/\n\n        \noption name=\ntimelimit_header\n value=\nicecast-auth-timelimit:\n/\n\n        \noption name=\nheaders\n value=\nx-pragma,x-token\n/\n\n        \noption name=\nheader_prefix\n value=\nClientHeader.\n/\n\n        \noption name=\nstream_auth\n value=\nhttp://auth.example.org/source.php\n/\n\n    \n/authentication\n\n\n/mount\n\n\n\n\n\nThe options are described below in more detail, each of which is optional, but in each case, within the POST data,\nthe value for each setting is encoded.\n\n\n\n\n\nmount_add\n\n\nThis URL is for informing the auth server of a stream starting. No listener information is passed for this,\nbut it can be used to initialise any details the auth server may have.  \n\n\nPOST Details\n\n\n\n\naction\n\n\nmount_add\n\n\nmount\n\n\nthe mountpoint starting up\n\n\nserver\n\n\nthe server name (\nhostname\n)\n\n\nport\n\n\nthe server port\n\n\n\n\nExample\n\n\naction=mount_add\nmount=/live\nserver=icecast.example.org\nport=8000\n\n\nmount_remove\n\n\nThis URL is for informing the auth server of a stream finishing, like the start option, no listener details\nare passed.  \n\n\nPOST Details\n\n\n\n\naction\n\n\nmount_remove\n\n\nmount\n\n\nthe mountpoint being removed\n\n\nserver\n\n\nthe server name (\nhostname\n)\n\n\nport\n\n\nthe server port\n\n\n\n\nExample\n\n\naction=mount_remove\nmount=/live\nserver=icecast.example.org\nport=8000\n\n\nlistener_add\n\n\nThis is most likely to be used if anything. When a listener connects, before anything is sent back to them, this\nrequest is processed. The default action is to reject a listener unless the auth server sends back a response header\nwhich may be stated in the \nheader\n option.\n\n\nPOST Details\n\n\n\n\naction\n\n\nlistener_add\n\n\nmount\n\n\nthe mountpoint, including query parameters\n\n\nserver\n\n\nthe server name (\nhostname\n)\n\n\nport\n\n\nthe server port\n\n\nuser\n\n\nuser as stated in listener HTTP basic auth\n\n\nMay be blank\n\n\npass\n\n\npass as stated in listener HTTP basic auth\n  \nMay be blank\n\n\nclient\n\n\nunique ID for the client within Icecast\n\n\nip\n\n\nlisteners IP address\n\n\nagent\n\n\nuseragent from the listeners player\n\n\n\n\nNote:\n The mount here (unlike the start/end options) states the requested url including any query parameters,\nso for instance the requested URL can be \n/stream.ogg\nsession=xyz\n, but note that each option data is\nescaped before being passed via POST.\n\n\nExample\n\n\naction=listener_add\nserver=icecast.example.org\nport=8000\nclient=1\nmount=/live\nuser=\npass=\nip=127.0.0.1\nagent=My%20player\n  \n\n\nlistener_remove\n\n\nThis URL is for when a listener connection closes.\n\n\nPOST Details\n\n\n\n\naction\n\n\nlistener_remove\n\n\nmount\n\n\nthe mountpoint\n\n\nserver\n\n\nthe server name (\nhostname\n)\n\n\nport\n\n\nthe server port\n\n\nuser\n\n\nuser as stated in listener HTTP basic auth\n\n\nMay be blank\n\n\npass\n\n\npass as stated in listener HTTP basic auth\n  \nMay be blank\n\n\nclient\n\n\nunique ID for the client within Icecast\n\n\nip\n\n\nlisteners IP address\n\n\nagent\n\n\nuseragent from the listeners player\n\n\nduration\n\n\nnumber of seconds the listener was connected for\n\n\n\n\nExample\n\n\naction=listener_remove\nserver=icecast.example.org\nport=8000\nclient=1\nmount=/live\nuser=\npass=\nduration=3600\nip=127.0.0.1\nagent=My%20player\n\n\nstream_auth\n\n\nTechnically this does not belong to listener authentication, but due to its similarity it is explained here too.\n\nWhen a source connects, before anything is sent back to them, this request is processed. The default action is to\nreject a source unless the auth server sends back a response header which may be stated in the \nheader\n option.\n\n\nPOST Details\n\n\n\n\naction\n\n\nstream_auth\n\n\nmount\n\n\nthe mountpoint\n\n\nserver\n\n\nhostname of the Icecast server the client tries to connect to\n\n\nport\n\n\nthe port of said server\n\n\nuser\n\n\nusername as sent by the source client\n\n\npass\n\n\npassword as sent by the source client\n\n\nadmin\n\n\nadmin request (read below)\n\n\n\n\nNote:\n As admin requests can come in for a stream (eg. metadata update) these requests can be issued while\nstream is active. For these \nadmin\n is set to \n1\n in POST details.\n\n\nExample\n\n\naction=stream_auth\nmount=/stream.ogg\nip=192.0.2.0\nserver=icecast.example.org\nport=8000\nuser=source\npass=password\nadmin=1\n\n\nOther Options\n\n\n\n\nauth_header\n\n\nThe expected response header to be returned that allows the authencation to take place may be specified here.\n\n  The default is:\n\n\nicecast-auth-user: 1\n\n  but it could be anything you like, for instance:\n\n\nHTTP 200 OK\n\n\ntimelimit_header\n\n\nListeners could have a time limit imposed on them, and if this header is sent back with a figure (which represents seconds)\n  then that is how long the client will remain connected for.\n\n\nheaders\n\n\nThis is a list of HTTP headers provided by the client which should be passed to the authencation service.\n  Those headers are prepended by the value of header_prefix and sent as POST parameters.\n\n\nheader_prefix\n\n\nThis is the prefix used for passing client headers. See headers for details.\n\n\n\n\nA note about players and authentication\n\n\nWe do not have an exaustive list of players that support listener authentication.\n\nWe use standard HTTP basic authentication, and in general, many media players support this if they support anything at all.\nWinamp and Foobar2000 support HTTP basic authentication on Windows, and XMMS supports it on UNIX platforms. Winamp/XMMS at\nleast support the passing of query parameters, other players may also do.\n\n\nSource Authentication\n\n\nSource authentication is a feature of Icecast which allows you to secure a certain mountpoint such that in order to stream to it,\na source client must pass some verification test. This section will show you the basics of setting up and maintaining this component.\n\nTo define source authentication, a group of tags are specified in the \nmount\n group relating to the mountpoint.  \n\n\nThe following authentication mechanisms can apply to sources:\n\n\n\n\n\n\n\nBASIC: \npassword\n and possibly \nusername\n in the \nmount\n section\n\n\nURL: issue web requests (eg. PHP) to match authentication\n\n\n\n\nURL authentication: \nstream_auth\n\n\nA \nmount\n can contain a section \nauthentication type=\"url\"\n and therein\n\noption name=\"stream_auth\" value=\"http://auth.example.org/source.php\"/\n. When a source connects, before anything is sent back to\nthem, this request is processed. The default action is to reject a source unless the auth server sends back a response header which may\nbe stated in the \nheader\n option (same as listener auth).  \n\n\nPOST Details\n\n\n\n\naction\n\n\nstream_auth\n\n\nmount\n\n\nthe mountpoint\n\n\nserver\n\n\nhostname of the Icecast server the client tries to connect to\n\n\nport\n\n\nthe port of said server\n\n\nuser\n\n\nusername as sent by the source client\n\n\npass\n\n\npassword as sent by the source client\n\n\nadmin\n\n\nadmin request (read below)\n\n\n\n\nNote:\n As admin requests can come in for a stream (eg. metadata update) these requests can be issued while\nstream is active. For these \nadmin\n is set to \n1\n in POST details.\n\n\nExample\n\n\naction=stream_auth\nmount=/stream.ogg\nip=192.0.2.0\nserver=icecast.example.org\nport=8000\nuser=source\npass=password\nadmin=1", 
            "title": "Authentication"
        }, 
        {
            "location": "/auth/#listener-authentication", 
            "text": "Listener authentication is a feature of Icecast which allows you to secure a certain mountpoint such that in order to listen,\na listener must pass some verification test. With this feature, a simple pay-for-play operation (eg. user/pass), or some filtering\nbased on the listener connection can be performed. This section will show you the basics of setting up and maintaining this component.    To define listener authentication, a group of tags are specified in the  mount  group relating to the mountpoint. This means\nthat authentication can apply to listeners of source clients or relays.    The following authentication mechanisms can apply to listeners:    htpasswd: lookup a named file for a matching username and password  URL: issue web requests (eg. PHP) to match authentication   The listener authentication within a specified mount in the icecast XML configuration can apply to either to a stream from a\nsource client, relay or a webroot based file. They do apply to intro files or fallback streams.", 
            "title": "Listener Authentication"
        }, 
        {
            "location": "/auth/#htpasswd-listener-authentication", 
            "text": "In order to use listener authentication, you  must  configure a mount specific option. This means that you have to provide\na  mount  section in the main icecast config file. The following is an example:   mount \n     mount-name /example.ogg /mount-name \n     authentication type= htpasswd \n         option name= filename  value= myauth / \n         option name= allow_duplicate_users  value= 0 / \n     /authentication  /mount   To support listener authentication you  must  provide at a minimum  mount-name  and  authentication . \nThe  mount-name  is the name of the mountpoint that you will use to connect your source client with and  authentication  configures\nwhat type of Icecast authenticator to use. \nCurrently, only  htpasswd  and  url  are implemented. Each authenticator has a variable number of options that are required and\nthese are specified as shown in the example. \nThe htpasswd authenticator requires a few parameters: \nThe first,  filename , specifies the name of the file to use to store users and passwords. Note that this file need not exist\n(and probably will not exist when you first set it up). \nIcecast has built-in support for managing users and passwords via the web admin interface. More on this later in this section. \nThe second option,  allow_duplicate_users , if set to  0 , will prevent multiple connections using the same username. Setting this\nvalue to  1  will enable mutltiple connections from the same username on a given mountpoint. \nNote there is no way to specify a \u201cmax connections\u201d for a particular user.    Icecast supports a mixture of streams that require listener authentication and those that do not.", 
            "title": "htpasswd Listener Authentication"
        }, 
        {
            "location": "/auth/#configuring-users-and-passwords", 
            "text": "Once the appropriate entries are made to the config file, connect your source client (using the mountpoint you named in\nthe config file). To configure users and passwords for this stream you must use the web-based admin interface. Navigate to http://server:ip/admin/stats.xsl  to begin. If you have configured everything properly, you should see a screen like the\nfollowing:   You will see a lock in front of all mountpoint configured for listener authentication. Also note that this page will\nonly show  connected  mountpoints.  To manage users and passwords for this mountpoint, click on the \u201cManage Authentication\u201d link. The following screen will be shown:   This screen will show all the users configured for this mountpoint. Adding users is as simple as entering a username and password\nin the fields and clicking \u201cAdd\u201d. \nNote that usernames  must  be unique and there are  no  restrictions on passwords. You can delete users by clicking the appropriate\ndelete link next to each user.", 
            "title": "Configuring Users and Passwords"
        }, 
        {
            "location": "/auth/#finishing-it-all-off", 
            "text": "Ok, so you've created your users, and you have everything setup properly, how do your users login? Well, we've provided a simple login\nform that you can use for this purpose. This page ( http://server:port/auth.xsl ) will bring up a form that users can use to enter their\nusername and password.   This page will serve a m3u with the username and password and in most cases should open the correct media player and begin playing\nyour stream.", 
            "title": "Finishing it all off"
        }, 
        {
            "location": "/auth/#url", 
            "text": "Authenticating listeners via the URL method involves Icecast, when a listener connects, issuing requests to a web server\nand checking the response headers. If a certain header is sent back then the listener connecting is allowed to continue,\nif not, an error is sent back to the listener.    The URLs specified will invoke some web server scripts like PHP to do any work that they may choose to do. All that is\nrequired of the scripting language is that POST information can be handled and response headers can be sent back. \nlibcurl is used for the requesting so https connections may be possible, but be aware of the extra overhead involved.    The useragent sent in each curl request will represent the Icecast server version. The response headers will depend on\nwhether the listener is to be accepted. In the case of rejection, a response header  Icecast-Auth-Message: Reason \nshould also be returned for placing in the log files.    In order to use URL based listener authentication, you  must  configure a mount specific option. This means that you\nhave to provide a  mount  section in the main Icecast config file. The following shows the list of options available:     mount \n     mount-name /example.ogg /mount-name \n     authentication type= url \n         option name= mount_add  value= http://auth.example.org/stream_start.php / \n         option name= mount_remove  value= http://auth.example.org/stream_end.php / \n         option name= listener_add  value= http://auth.example.org/listener_joined.php / \n         option name= listener_remove  value= http://auth.example.org/listener_left.php / \n         option name= username  value= user / \n         option name= password  value= pass / \n         option name= auth_header  value= icecast-auth-user: 1 / \n         option name= timelimit_header  value= icecast-auth-timelimit: / \n         option name= headers  value= x-pragma,x-token / \n         option name= header_prefix  value= ClientHeader. / \n         option name= stream_auth  value= http://auth.example.org/source.php / \n     /authentication  /mount   The options are described below in more detail, each of which is optional, but in each case, within the POST data,\nthe value for each setting is encoded.", 
            "title": "URL"
        }, 
        {
            "location": "/auth/#mount_add", 
            "text": "This URL is for informing the auth server of a stream starting. No listener information is passed for this,\nbut it can be used to initialise any details the auth server may have.    POST Details   action  mount_add  mount  the mountpoint starting up  server  the server name ( hostname )  port  the server port   Example  action=mount_add mount=/live server=icecast.example.org port=8000", 
            "title": "mount_add"
        }, 
        {
            "location": "/auth/#mount_remove", 
            "text": "This URL is for informing the auth server of a stream finishing, like the start option, no listener details\nare passed.    POST Details   action  mount_remove  mount  the mountpoint being removed  server  the server name ( hostname )  port  the server port   Example  action=mount_remove mount=/live server=icecast.example.org port=8000", 
            "title": "mount_remove"
        }, 
        {
            "location": "/auth/#listener_add", 
            "text": "This is most likely to be used if anything. When a listener connects, before anything is sent back to them, this\nrequest is processed. The default action is to reject a listener unless the auth server sends back a response header\nwhich may be stated in the  header  option.  POST Details   action  listener_add  mount  the mountpoint, including query parameters  server  the server name ( hostname )  port  the server port  user  user as stated in listener HTTP basic auth  May be blank  pass  pass as stated in listener HTTP basic auth\n   May be blank  client  unique ID for the client within Icecast  ip  listeners IP address  agent  useragent from the listeners player   Note:  The mount here (unlike the start/end options) states the requested url including any query parameters,\nso for instance the requested URL can be  /stream.ogg session=xyz , but note that each option data is\nescaped before being passed via POST.  Example  action=listener_add server=icecast.example.org port=8000 client=1 mount=/live user= pass= ip=127.0.0.1 agent=My%20player", 
            "title": "listener_add"
        }, 
        {
            "location": "/auth/#listener_remove", 
            "text": "This URL is for when a listener connection closes.  POST Details   action  listener_remove  mount  the mountpoint  server  the server name ( hostname )  port  the server port  user  user as stated in listener HTTP basic auth  May be blank  pass  pass as stated in listener HTTP basic auth\n   May be blank  client  unique ID for the client within Icecast  ip  listeners IP address  agent  useragent from the listeners player  duration  number of seconds the listener was connected for   Example  action=listener_remove server=icecast.example.org port=8000 client=1 mount=/live user= pass= duration=3600 ip=127.0.0.1 agent=My%20player", 
            "title": "listener_remove"
        }, 
        {
            "location": "/auth/#stream_auth", 
            "text": "Technically this does not belong to listener authentication, but due to its similarity it is explained here too. \nWhen a source connects, before anything is sent back to them, this request is processed. The default action is to\nreject a source unless the auth server sends back a response header which may be stated in the  header  option.  POST Details   action  stream_auth  mount  the mountpoint  server  hostname of the Icecast server the client tries to connect to  port  the port of said server  user  username as sent by the source client  pass  password as sent by the source client  admin  admin request (read below)   Note:  As admin requests can come in for a stream (eg. metadata update) these requests can be issued while\nstream is active. For these  admin  is set to  1  in POST details.  Example  action=stream_auth mount=/stream.ogg ip=192.0.2.0 server=icecast.example.org port=8000 user=source pass=password admin=1", 
            "title": "stream_auth"
        }, 
        {
            "location": "/auth/#other-options", 
            "text": "auth_header  The expected response header to be returned that allows the authencation to take place may be specified here. \n  The default is:  icecast-auth-user: 1 \n  but it could be anything you like, for instance:  HTTP 200 OK  timelimit_header  Listeners could have a time limit imposed on them, and if this header is sent back with a figure (which represents seconds)\n  then that is how long the client will remain connected for.  headers  This is a list of HTTP headers provided by the client which should be passed to the authencation service.\n  Those headers are prepended by the value of header_prefix and sent as POST parameters.  header_prefix  This is the prefix used for passing client headers. See headers for details.", 
            "title": "Other Options"
        }, 
        {
            "location": "/auth/#a-note-about-players-and-authentication", 
            "text": "We do not have an exaustive list of players that support listener authentication. \nWe use standard HTTP basic authentication, and in general, many media players support this if they support anything at all.\nWinamp and Foobar2000 support HTTP basic authentication on Windows, and XMMS supports it on UNIX platforms. Winamp/XMMS at\nleast support the passing of query parameters, other players may also do.", 
            "title": "A note about players and authentication"
        }, 
        {
            "location": "/auth/#source-authentication", 
            "text": "Source authentication is a feature of Icecast which allows you to secure a certain mountpoint such that in order to stream to it,\na source client must pass some verification test. This section will show you the basics of setting up and maintaining this component. \nTo define source authentication, a group of tags are specified in the  mount  group relating to the mountpoint.    The following authentication mechanisms can apply to sources:    BASIC:  password  and possibly  username  in the  mount  section  URL: issue web requests (eg. PHP) to match authentication", 
            "title": "Source Authentication"
        }, 
        {
            "location": "/auth/#url-authentication-stream_auth", 
            "text": "A  mount  can contain a section  authentication type=\"url\"  and therein option name=\"stream_auth\" value=\"http://auth.example.org/source.php\"/ . When a source connects, before anything is sent back to\nthem, this request is processed. The default action is to reject a source unless the auth server sends back a response header which may\nbe stated in the  header  option (same as listener auth).    POST Details   action  stream_auth  mount  the mountpoint  server  hostname of the Icecast server the client tries to connect to  port  the port of said server  user  username as sent by the source client  pass  password as sent by the source client  admin  admin request (read below)   Note:  As admin requests can come in for a stream (eg. metadata update) these requests can be issued while\nstream is active. For these  admin  is set to  1  in POST details.  Example  action=stream_auth mount=/stream.ogg ip=192.0.2.0 server=icecast.example.org port=8000 user=source pass=password admin=1", 
            "title": "URL authentication: stream_auth"
        }, 
        {
            "location": "/relaying/", 
            "text": "Relaying is the process by which one server mirrors one or more streams from a remote server. The servers\nneed not be of the same type (i.e. Icecast can relay from Shoutcast). Relaying is used primarily for large\nbroadcasts that need to distribute listening clients across multiple physical machines.\n\n\nType of Relays\n\n\nThere are two types of relays that Icecast supports:\n\nThe first type is when both master and slave servers are Icecast 2 servers. In this case, a \u201cmaster-slave\u201d relay\ncan be setup such that all that needs to be done is configure the slave server with the connection information\n(server IP and port) of the master server and the slave will mirror all mountpoints on the master server. The slave\nwill also periodically check the master server to see if any new mountpoints have attached and if so will relay those\nas well.\n\n\nThe second type of relay is a specific mountpoint relay. In this case, the slave server is configured with a\nserver IP, port and mountpoint and only the mountpoint specified is relayed.\n\n\nSetting Up a Master-Slave Relay\n\n\nIn order to setup a relay of this type both servers (the one you wish to relay and the one doing the relaying)\nneed to be Icecast 2 servers.\n\nThe following configuration snippet is used as an example:\n\n\nmaster-server\n192.168.1.11\n/master-server\n\n\nmaster-server-port\n8001\n/master-server-port\n\n\nmaster-update-interval\n120\n/master-update-interval\n\n\nmaster-username\nrelay\n/master-username\n\n\nmaster-password\nhackme\n/master-password\n\n\nrelays-on-demand\n0\n/relays-on-demand\n\n\n\n\n\nIn this example, this configuration is setup in the server which will be doing the relaying (slave server).\nThe master server in this case need not be configured (and actually is unaware of the relaying being performed).\nWhen the slave server is started, it will connect to the master server, 192.168.1.11:8001 in this example. The slave server will begin to relay all non-hidden mountpoints connected to the master server. Additionally, every master-update-interval, 120 seconds\nin this case, the slave server will poll the master server to see if any new mountpoints have connected.\n\nNote that the names of the mountpoints on the slave server will be identical to those on the master server.\n\n\nConfiguration options:\n\n\n\n\nmaster-server\n\n\nThis is the hostname (or IP) for the server which contains the mountpoints to be relayed (Master Server).\n\n\nmaster-server-port\n\n\nThis is the TCP port for the server which contains the mountpoints to be relayed (Master Server).\n\n\nmaster-update-interval\n\n\nThe interval in seconds that the relay server will poll the master server for any new mountpoints to relay.\n\n\nmaster-username\n\n\nThis is the relay username for the master server, used to query the server for a list of mountpoints to relay.\n\n  (Defaults to \nrelay\n)\n\n\nmaster-password\n\n\nThis is the relay password for the master server, used to query the server for a list of mounpoints to relay.\n\n\nrelays-on-demand\n\n\nGlobal on-demand setting for relays. Because you do not have individual relay options when using a master server relay, you still may want those relays to only pull the stream when there is at least one listener on the slave. The typical case here is to avoid bandwidth costs when no one is listening.\n\n\n\n\nSpecific Mountpoint Relay\n\n\nIf only specific mountpoints need to be relayed, or the master server is not a Icecast 2 server, you can use the specific\nmountpoint relay. Supported master servers for this type of relay are Shoutcast, Icecast 1.x, and of course Icecast 2.\n\nThe following configuration snippet is used as an example:\n\n\nrelay\n\n    \nserver\n192.168.1.11\n/server\n\n    \nport\n8001\n/port\n\n    \nmount\n/example.ogg\n/mount\n\n    \nlocal-mount\n/different.ogg\n/local-mount\n\n    \nusername\nJekyll\n/username\n\n    \npassword\nHyde\n/password\n\n    \nrelay-shoutcast-metadata\n0\n/relay-shoutcast-metadata\n\n    \non-demand\n1\n/on-demand\n\n\n/relay\n\n\n\n\n\nIn this example, this configuration is setup in the server which will be doing the relaying (slave server). \nThe master server in this case need not be configured (and actually is unaware of the relaying being performed) as a\nrelay. When the slave server is started, it will connect to the master server, in this example located at 192.168.1.11:8001\nand will begin to relay only the mountpoint specified (/example.ogg in this case).\n\nUsing this type of relay, the user can override the local mountpoint name and make it something entirely different than the one on the master server. Additionally, if the server is a Shoutcast server, then the \nmount\n must be specified as \n/\n,\nand if you want the Shoutcast relay stream to have metadata contained within it (Shoutcast metadata is embedded\nin the stream itself), the \nrelay-shoutcast-metadata\n needs to be set to \n1\n.\n\n\nConfiguration options:\n\n\n\n\nserver\n\n\nThis is the hostname (or IP) for the server which contains the mountpoint to be relayed.\n\n\nport\n\n\nThis is the TCP port for the server which contains the mountpoint to be relayed.\n\n\nmount\n\n\nThe mountpoint located on the remote server. (If you are relaying a Shoutcast stream, this should be \n/\n)\n\n\nlocal-mount\n\n\nThe name to use for the local mountpoint. This is what the mountpoint will be called on the relaying server. (Defaults to the remote mountpoint)\n\n\nusername\n\n\nThe username, if required, for the remote mountpoint.\n\n\npassword\n\n\nThe password, if required, for the remote mountpoint.\n\n\nrelay-shoutcast-metadata\n\n\nIf relaying a Shoutcast stream, set this to \n1\n to relay the metadata (song titles), which are part of the Shoutcast data stream. (Defaults to enabled, but it's up to the remote server if metadata is sent)\n\n  Possible values: \n1\n: enabled, \n0\n: disabled\n\n\non-demand\n\n\nAn on-demand relay will only retrieve the stream if there are listeners requesting the stream. (Defaults to  the value of \nrelays-on-demand\n)\n\n  Possible values: \n1\n: enabled, \n0\n: disabled", 
            "title": "Relaying"
        }, 
        {
            "location": "/relaying/#type-of-relays", 
            "text": "There are two types of relays that Icecast supports: \nThe first type is when both master and slave servers are Icecast 2 servers. In this case, a \u201cmaster-slave\u201d relay\ncan be setup such that all that needs to be done is configure the slave server with the connection information\n(server IP and port) of the master server and the slave will mirror all mountpoints on the master server. The slave\nwill also periodically check the master server to see if any new mountpoints have attached and if so will relay those\nas well.  The second type of relay is a specific mountpoint relay. In this case, the slave server is configured with a\nserver IP, port and mountpoint and only the mountpoint specified is relayed.", 
            "title": "Type of Relays"
        }, 
        {
            "location": "/relaying/#setting-up-a-master-slave-relay", 
            "text": "In order to setup a relay of this type both servers (the one you wish to relay and the one doing the relaying)\nneed to be Icecast 2 servers. \nThe following configuration snippet is used as an example:  master-server 192.168.1.11 /master-server  master-server-port 8001 /master-server-port  master-update-interval 120 /master-update-interval  master-username relay /master-username  master-password hackme /master-password  relays-on-demand 0 /relays-on-demand   In this example, this configuration is setup in the server which will be doing the relaying (slave server).\nThe master server in this case need not be configured (and actually is unaware of the relaying being performed).\nWhen the slave server is started, it will connect to the master server, 192.168.1.11:8001 in this example. The slave server will begin to relay all non-hidden mountpoints connected to the master server. Additionally, every master-update-interval, 120 seconds\nin this case, the slave server will poll the master server to see if any new mountpoints have connected. \nNote that the names of the mountpoints on the slave server will be identical to those on the master server.  Configuration options:   master-server  This is the hostname (or IP) for the server which contains the mountpoints to be relayed (Master Server).  master-server-port  This is the TCP port for the server which contains the mountpoints to be relayed (Master Server).  master-update-interval  The interval in seconds that the relay server will poll the master server for any new mountpoints to relay.  master-username  This is the relay username for the master server, used to query the server for a list of mountpoints to relay. \n  (Defaults to  relay )  master-password  This is the relay password for the master server, used to query the server for a list of mounpoints to relay.  relays-on-demand  Global on-demand setting for relays. Because you do not have individual relay options when using a master server relay, you still may want those relays to only pull the stream when there is at least one listener on the slave. The typical case here is to avoid bandwidth costs when no one is listening.", 
            "title": "Setting Up a Master-Slave Relay"
        }, 
        {
            "location": "/relaying/#specific-mountpoint-relay", 
            "text": "If only specific mountpoints need to be relayed, or the master server is not a Icecast 2 server, you can use the specific\nmountpoint relay. Supported master servers for this type of relay are Shoutcast, Icecast 1.x, and of course Icecast 2. \nThe following configuration snippet is used as an example:  relay \n     server 192.168.1.11 /server \n     port 8001 /port \n     mount /example.ogg /mount \n     local-mount /different.ogg /local-mount \n     username Jekyll /username \n     password Hyde /password \n     relay-shoutcast-metadata 0 /relay-shoutcast-metadata \n     on-demand 1 /on-demand  /relay   In this example, this configuration is setup in the server which will be doing the relaying (slave server). \nThe master server in this case need not be configured (and actually is unaware of the relaying being performed) as a\nrelay. When the slave server is started, it will connect to the master server, in this example located at 192.168.1.11:8001\nand will begin to relay only the mountpoint specified (/example.ogg in this case). \nUsing this type of relay, the user can override the local mountpoint name and make it something entirely different than the one on the master server. Additionally, if the server is a Shoutcast server, then the  mount  must be specified as  / ,\nand if you want the Shoutcast relay stream to have metadata contained within it (Shoutcast metadata is embedded\nin the stream itself), the  relay-shoutcast-metadata  needs to be set to  1 .  Configuration options:   server  This is the hostname (or IP) for the server which contains the mountpoint to be relayed.  port  This is the TCP port for the server which contains the mountpoint to be relayed.  mount  The mountpoint located on the remote server. (If you are relaying a Shoutcast stream, this should be  / )  local-mount  The name to use for the local mountpoint. This is what the mountpoint will be called on the relaying server. (Defaults to the remote mountpoint)  username  The username, if required, for the remote mountpoint.  password  The password, if required, for the remote mountpoint.  relay-shoutcast-metadata  If relaying a Shoutcast stream, set this to  1  to relay the metadata (song titles), which are part of the Shoutcast data stream. (Defaults to enabled, but it's up to the remote server if metadata is sent) \n  Possible values:  1 : enabled,  0 : disabled  on-demand  An on-demand relay will only retrieve the stream if there are listeners requesting the stream. (Defaults to  the value of  relays-on-demand ) \n  Possible values:  1 : enabled,  0 : disabled", 
            "title": "Specific Mountpoint Relay"
        }, 
        {
            "location": "/yp/", 
            "text": "Overview\n\n\nA YP directory is a listing of broadcast streams. Icecast has it own YP directory located at\n\nhttp://dir.xiph.org\n. Currently Icecast can only be listed in an Icecast-supported YP directory.\n\nThis means that you cannot list your stream in the Shoutcast YP directory, due to their terms of service.\n\n\nIn the Icecast configuration file are all the currently available YP directory servers. Listing your stream in a YP is\na combination of settings in the Icecast configuration file and also in your source client. It is of great importance\nto configure Icecast correctly, as even one wrong setting can prevent listings to be accepted by a YP directory.\n\n\nConfiguring Icecast for YP Support\n\n\nFirst of all, Icecast must have been built with YP support. This is automatically done if you have libcurl installed.\nIf libcurl is not detected when icecats is compiled, then YP support is disabled.\n\nIf Icecast has been built with YP support, then the following configuration options control the YP directory settings:\n\n\ndirectory\n\n    \nyp-url-timeout\n15\n/yp-url-timeout\n\n    \nyp-url\nhttp://dir.xiph.org/cgi-bin/yp-cgi\n/yp-url\n\n\n/directory\n\n\n\n\n\nMultiple directory XML chunks can be specified in order to be listed in multiple directories.\n\n\nFurther options that play a significant role in YP listings\n\n\n\n\nhostname\n\n\nThe hostname option \nMUST\n be set to a name that resolves to the machine this Icecast server runs on.\n\n\nlistener-socket port\n\n\nThe \nfirst\n \nlistener-socket\n+\nport\n entry is used to build the URL advertized to the YP server.\n\n\nlistener-socket bind-address\n\n\nIf you don't specify an explicit \nbind-address\n, including \n::\n and \n0.0.0.0\n, then the default\n  bind behaviour of your operating system will apply, this may have unexpected consequences for dual-stack\n  (IPv6 and IPv4) setups.\n\n\n\n\nIf your hostname resolves to both an AAAA and an A record (IPv6 and IPv4), then you \nMUST\n verify,\nthat Icecast listens to both. If in doubt create two listener-socket entries and use \n::\n and \n0.0.0.0\n\nas the respective \nbind-address\n.\n\n\n\n\nadmin\n\n\nIf you are listing on a YP, then this field \nMUST\n contain a valid email address of a technical contact\n  on your side. YP admins will use this to reach you in case your server is misconfigured and causes problems\n  for the YP directory. An invalid or unreachable address is likely to get your radio/server/network banned from YP.\n\n\n\n\nVerifying the advertized URL\n\n\nAfter adjusting the settings and configuring your source client, you should verify setup: \n\nGo to the Icecast web interface, specifically the admin part \n/admin/\n and look for the \nlistenurl\n values \nof your streams. These URLs \nMUST\n work from the public internet, or your listings will fail.\n\n\nThis is also one of the checks performed by a YP server. Common misconfigurations are:\n\n\n\n\nhostname\n set to \nlocalhost\n\n\nhostname\n set to some address that does \nNOT\n point to the Icecast server\n\n\nhostname has AAAA record but Icecast not bound to \n::\n\n\nmultiple \nlistener-socket\n entries, but the first one is not publicly reachable\n\n\n\n\nConfiguring Your Source Client for YP Support\n\n\nThis is usually covered in the source client documentation. More specifically, the source client needs to provide\nthe HTTP header \nIce-Public: 1\n on connect in order to enable YP listing of the stream.\n\nThis can however be overridden in the server side mount point settings, refer to \u201c\nIcecast Config File\n\u201d\nfor further details.\n\nIf a mountpoint is being listed on a YP, then you will see some additional statistics relating to the YP such as\n\nlast-touch\n, \ncurrently-playing\n, etc.\n\n\nTroubleshooting\n\n\nAs with all Icecast problems, the error log is the goto place to start. If necessary temporary increase the log level to \n\n4\n (debug) and reload the Icecast config. All relevant messages will contain \nYP\n. Especially those messages that tell\nyou that something \nfailed\n will contain important hints and or messages from the YP server. If your entry submission\nis directly rejected the server will tell why, if your entry gets delisted after submission, then you will see \nupdates/touches fail. Depending on the YP server the stream reachability check will be deferred, so you will see\na successfull initial submission, but if your stream is found to be unreachable it will be delisted and updates will fail.\nPlease note that YP directories will check both IPv6 and IPv4 availability of streams. See the list of common misconfigurations\nfor further hints.\n\n\nShould you still have problems listing on \nhttp://dir.xiph.org\n, then please:\n\n\n\n\nSet your logging to \n4\n (debug)\n\n\nReload/restart Icecast\n\n\nMake sure your streams are running and marked public (either by source setting or mountpoint override)\n\n\nWait for \none hour\n\n\nFilter the error log for messages from the last hour, that are beginning with \nyp/\n\n\nJoin the \nhttp://lists.xiph.org/mailman/listinfo/icecast\n (else the following step will fail!)\n\n\nSend a mail to \nmailto:icecast@xiph.org\n containing:\n\n\nThe public URL of your Icecast server - e.g. \nhttp://icecast.example.org:8000/\n (Even if you have removed the status pages! This does \nNOT\n mean your homepage.)\n\n\nThe \nhostname\n, \nlisten-socket\n and \ndirectory\n sections of your \nicecast.xml\n\n\nThe \nfiltered\n error.log prepared previously (as an attachment)\n\n\n\n\n\n\nWait for replies from the mailing list", 
            "title": "Listing in a YellowPage Directory"
        }, 
        {
            "location": "/yp/#overview", 
            "text": "A YP directory is a listing of broadcast streams. Icecast has it own YP directory located at http://dir.xiph.org . Currently Icecast can only be listed in an Icecast-supported YP directory. \nThis means that you cannot list your stream in the Shoutcast YP directory, due to their terms of service.  In the Icecast configuration file are all the currently available YP directory servers. Listing your stream in a YP is\na combination of settings in the Icecast configuration file and also in your source client. It is of great importance\nto configure Icecast correctly, as even one wrong setting can prevent listings to be accepted by a YP directory.", 
            "title": "Overview"
        }, 
        {
            "location": "/yp/#configuring-icecast-for-yp-support", 
            "text": "First of all, Icecast must have been built with YP support. This is automatically done if you have libcurl installed.\nIf libcurl is not detected when icecats is compiled, then YP support is disabled. \nIf Icecast has been built with YP support, then the following configuration options control the YP directory settings:  directory \n     yp-url-timeout 15 /yp-url-timeout \n     yp-url http://dir.xiph.org/cgi-bin/yp-cgi /yp-url  /directory   Multiple directory XML chunks can be specified in order to be listed in multiple directories.", 
            "title": "Configuring Icecast for YP Support"
        }, 
        {
            "location": "/yp/#further-options-that-play-a-significant-role-in-yp-listings", 
            "text": "hostname  The hostname option  MUST  be set to a name that resolves to the machine this Icecast server runs on.  listener-socket port  The  first   listener-socket + port  entry is used to build the URL advertized to the YP server.  listener-socket bind-address  If you don't specify an explicit  bind-address , including  ::  and  0.0.0.0 , then the default\n  bind behaviour of your operating system will apply, this may have unexpected consequences for dual-stack\n  (IPv6 and IPv4) setups.   If your hostname resolves to both an AAAA and an A record (IPv6 and IPv4), then you  MUST  verify,\nthat Icecast listens to both. If in doubt create two listener-socket entries and use  ::  and  0.0.0.0 \nas the respective  bind-address .   admin  If you are listing on a YP, then this field  MUST  contain a valid email address of a technical contact\n  on your side. YP admins will use this to reach you in case your server is misconfigured and causes problems\n  for the YP directory. An invalid or unreachable address is likely to get your radio/server/network banned from YP.   Verifying the advertized URL  After adjusting the settings and configuring your source client, you should verify setup:  \nGo to the Icecast web interface, specifically the admin part  /admin/  and look for the  listenurl  values \nof your streams. These URLs  MUST  work from the public internet, or your listings will fail.  This is also one of the checks performed by a YP server. Common misconfigurations are:   hostname  set to  localhost  hostname  set to some address that does  NOT  point to the Icecast server  hostname has AAAA record but Icecast not bound to  ::  multiple  listener-socket  entries, but the first one is not publicly reachable", 
            "title": "Further options that play a significant role in YP listings"
        }, 
        {
            "location": "/yp/#configuring-your-source-client-for-yp-support", 
            "text": "This is usually covered in the source client documentation. More specifically, the source client needs to provide\nthe HTTP header  Ice-Public: 1  on connect in order to enable YP listing of the stream. \nThis can however be overridden in the server side mount point settings, refer to \u201c Icecast Config File \u201d\nfor further details. \nIf a mountpoint is being listed on a YP, then you will see some additional statistics relating to the YP such as last-touch ,  currently-playing , etc.", 
            "title": "Configuring Your Source Client for YP Support"
        }, 
        {
            "location": "/yp/#troubleshooting", 
            "text": "As with all Icecast problems, the error log is the goto place to start. If necessary temporary increase the log level to  4  (debug) and reload the Icecast config. All relevant messages will contain  YP . Especially those messages that tell\nyou that something  failed  will contain important hints and or messages from the YP server. If your entry submission\nis directly rejected the server will tell why, if your entry gets delisted after submission, then you will see \nupdates/touches fail. Depending on the YP server the stream reachability check will be deferred, so you will see\na successfull initial submission, but if your stream is found to be unreachable it will be delisted and updates will fail.\nPlease note that YP directories will check both IPv6 and IPv4 availability of streams. See the list of common misconfigurations\nfor further hints.  Should you still have problems listing on  http://dir.xiph.org , then please:   Set your logging to  4  (debug)  Reload/restart Icecast  Make sure your streams are running and marked public (either by source setting or mountpoint override)  Wait for  one hour  Filter the error log for messages from the last hour, that are beginning with  yp/  Join the  http://lists.xiph.org/mailman/listinfo/icecast  (else the following step will fail!)  Send a mail to  mailto:icecast@xiph.org  containing:  The public URL of your Icecast server - e.g.  http://icecast.example.org:8000/  (Even if you have removed the status pages! This does  NOT  mean your homepage.)  The  hostname ,  listen-socket  and  directory  sections of your  icecast.xml  The  filtered  error.log prepared previously (as an attachment)    Wait for replies from the mailing list", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/admin_interface/", 
            "text": "This section contains information about the admin interface of Icecast. Through this interface the user can manipulate many server features. From it you can gather statistics, move listeners from one mountpoint to another, disconnect connected sources or listeners and many other activities. Each function is enumerated here as well as an example usage of the function.\n\n\nEach of these functions requires HTTP authentication via the appropriate username and password. For mount-specific functions, you may use either the \nadmin-username\n and \nadmin-password\n specified in the Icecast config file, or the username and password specified for that mountpoint (if any). For general functions (not specific to a single mountpoint), you must use the admin username and password.\n\n\nAdmin Functions (mount specific)\n\n\nAll these admin functions are mount specific in that they only apply to a particular mountpoint\n(as opposed to applying to the entire server). Each of these functions requires a mountpoint to\nbe specified as input.\n\n\nMetadata Update\n\n\nThis function provides the ability for either a source client or any external program to update\nthe metadata information for a particular mountpoint.\n\n\nExample:\n\n\n/admin/metadata?mount=/stream\nmode=updinfo\nsong=ACDC+Back+In+Black\n\n\nFallback Update\n\n\nThis function provides the ability for either a source client or any external program to update the\n\u201cfallback mountpoint\u201d for a particular mountpoint. Fallback mounts are those that are used in the even\nof a source client disconnection. If a source client disconnects for some reason that all currently\nconnected clients are sent immediately to the fallback mountpoint.\n\n\nExample:\n\n\n/admin/fallbacks?mount=/stream.ogg\nfallback=/fallback.ogg\n\n\nList Clients\n\n\nThis function lists all the clients currently connected to a specific mountpoint. The results are sent\nback in XML form.\n\n\nExample:\n\n\n/admin/listclients?mount=/stream.ogg\n\n\nMove Clients (Listeners)\n\n\nThis function provides the ability to migrate currently connected listeners from one mountpoint to another.\nThis function requires 2 mountpoints to be passed in: mount (the \nfrom\n mountpoint) and destination\n(the \nto\n mountpoint). After processing this function all currently connected listeners on mount will\nbe connected to destination. Note that the destination mountpoint must exist and have a sounce client\nalready feeding it a stream.\n\n\nExample:\n\n\n/admin/moveclients?mount=/stream.ogg\ndestination=/newstream.ogg\n\n\nKill Client (Listener)\n\n\nThis function provides the ability to disconnect a specific listener of a currently connected mountpoint.\nListeners are identified by a unique id that can be retrieved by via the \u201cList Clients\u201d admin function.\nThis id must be passed in to the request via the variable \nid\n. After processing this request, the listener will no longer be\nconnected to the mountpoint.\n\n\nExample:\n\n\n/admin/killclient?mount=/mystream.ogg\nid=21\n\n\nKill Source\n\n\nThis function will provide the ability to disconnect a specific mountpoint from the server. The mountpoint\nto be disconnected is specified via the variable \nmount\n.\n\n\nExample:\n\n\n/admin/killsource?mount=/mystream.ogg\n\n\nAdmin Functions (general)\n\n\nStats\n\n\nThe stats function provides the ability to query the internal statistics kept by the Icecast server.\nAlmost all information about the internal workings of the server such as the mountpoints connected,\nhow many client requests have been served, how many listeners for each mountpoint, etc. are available\nvia this admin function.\n\n\nExample:\n\n\n/admin/stats\n\n\nList Mounts\n\n\nThe list mounts function provides the ability to view all the currently connected mountpoints.\n\n\nExample:\n\n\n/admin/listmounts\n\n\nWeb-Based Admin Interface\n\n\nAs an alternative to manually invoking these URLs, there is a web-based admin interface.\nThis interface provides the same functions that were identified and described above but presents them in\na nicer way. The web-based admin Interface to Icecast is shipped with Icecast provided in the\n\nadmin\n directory and comes ready to use.\n\n\nThe main path for the Web-Based Admin Interface is:\n\n\n/admin/stats.xsl\n\n\nAdvanced\n\n\nThe web-based admin interface is a series of XSL-Transform files which are used to display all the XML obtained\nvia the URL admin interface. This can be changed and modified to suit the user's need. Knowledge of\nXSLT and transformations from XML to HTML are required in order to make changes to these scripts.\n\n\nModification of existing XSLT transforms in \n/admin\n is allowed, but new files cannot be created here.\n\n\nCreation of new XSLT transforms as well as modification of existing transforms is allowed in  the \n/web\n directory.\nThese work using the document returned by the \n/admin/stats\n endpoint.\n\nTo see the XML document that is applied to each admin XSLT, just remove the .xsl in your request\n(i.e. \n/admin/listclients\n). You can then code your XSL transform accordingly.", 
            "title": "Admin Interface"
        }, 
        {
            "location": "/admin_interface/#admin-functions-mount-specific", 
            "text": "All these admin functions are mount specific in that they only apply to a particular mountpoint\n(as opposed to applying to the entire server). Each of these functions requires a mountpoint to\nbe specified as input.", 
            "title": "Admin Functions (mount specific)"
        }, 
        {
            "location": "/admin_interface/#metadata-update", 
            "text": "This function provides the ability for either a source client or any external program to update\nthe metadata information for a particular mountpoint.  Example:  /admin/metadata?mount=/stream mode=updinfo song=ACDC+Back+In+Black", 
            "title": "Metadata Update"
        }, 
        {
            "location": "/admin_interface/#fallback-update", 
            "text": "This function provides the ability for either a source client or any external program to update the\n\u201cfallback mountpoint\u201d for a particular mountpoint. Fallback mounts are those that are used in the even\nof a source client disconnection. If a source client disconnects for some reason that all currently\nconnected clients are sent immediately to the fallback mountpoint.  Example:  /admin/fallbacks?mount=/stream.ogg fallback=/fallback.ogg", 
            "title": "Fallback Update"
        }, 
        {
            "location": "/admin_interface/#list-clients", 
            "text": "This function lists all the clients currently connected to a specific mountpoint. The results are sent\nback in XML form.  Example:  /admin/listclients?mount=/stream.ogg", 
            "title": "List Clients"
        }, 
        {
            "location": "/admin_interface/#move-clients-listeners", 
            "text": "This function provides the ability to migrate currently connected listeners from one mountpoint to another.\nThis function requires 2 mountpoints to be passed in: mount (the  from  mountpoint) and destination\n(the  to  mountpoint). After processing this function all currently connected listeners on mount will\nbe connected to destination. Note that the destination mountpoint must exist and have a sounce client\nalready feeding it a stream.  Example:  /admin/moveclients?mount=/stream.ogg destination=/newstream.ogg", 
            "title": "Move Clients (Listeners)"
        }, 
        {
            "location": "/admin_interface/#kill-client-listener", 
            "text": "This function provides the ability to disconnect a specific listener of a currently connected mountpoint.\nListeners are identified by a unique id that can be retrieved by via the \u201cList Clients\u201d admin function.\nThis id must be passed in to the request via the variable  id . After processing this request, the listener will no longer be\nconnected to the mountpoint.  Example:  /admin/killclient?mount=/mystream.ogg id=21", 
            "title": "Kill Client (Listener)"
        }, 
        {
            "location": "/admin_interface/#kill-source", 
            "text": "This function will provide the ability to disconnect a specific mountpoint from the server. The mountpoint\nto be disconnected is specified via the variable  mount .  Example:  /admin/killsource?mount=/mystream.ogg", 
            "title": "Kill Source"
        }, 
        {
            "location": "/admin_interface/#admin-functions-general", 
            "text": "", 
            "title": "Admin Functions (general)"
        }, 
        {
            "location": "/admin_interface/#stats", 
            "text": "The stats function provides the ability to query the internal statistics kept by the Icecast server.\nAlmost all information about the internal workings of the server such as the mountpoints connected,\nhow many client requests have been served, how many listeners for each mountpoint, etc. are available\nvia this admin function.  Example:  /admin/stats", 
            "title": "Stats"
        }, 
        {
            "location": "/admin_interface/#list-mounts", 
            "text": "The list mounts function provides the ability to view all the currently connected mountpoints.  Example:  /admin/listmounts", 
            "title": "List Mounts"
        }, 
        {
            "location": "/admin_interface/#web-based-admin-interface", 
            "text": "As an alternative to manually invoking these URLs, there is a web-based admin interface.\nThis interface provides the same functions that were identified and described above but presents them in\na nicer way. The web-based admin Interface to Icecast is shipped with Icecast provided in the admin  directory and comes ready to use.  The main path for the Web-Based Admin Interface is:  /admin/stats.xsl", 
            "title": "Web-Based Admin Interface"
        }, 
        {
            "location": "/admin_interface/#advanced", 
            "text": "The web-based admin interface is a series of XSL-Transform files which are used to display all the XML obtained\nvia the URL admin interface. This can be changed and modified to suit the user's need. Knowledge of\nXSLT and transformations from XML to HTML are required in order to make changes to these scripts.  Modification of existing XSLT transforms in  /admin  is allowed, but new files cannot be created here.  Creation of new XSLT transforms as well as modification of existing transforms is allowed in  the  /web  directory.\nThese work using the document returned by the  /admin/stats  endpoint. \nTo see the XML document that is applied to each admin XSLT, just remove the .xsl in your request\n(i.e.  /admin/listclients ). You can then code your XSL transform accordingly.", 
            "title": "Advanced"
        }, 
        {
            "location": "/win32/", 
            "text": "The Win32 port of Icecast 2 is a simple command line application,\nit used to be a UI framework around the core Icecast 2 server.  \n\n\nThe GUI is no longer necessary as Icecast has achieved all of its \nfunctionality in its web interface.\n\n\nMost of the features of Icecast 2 are available in the Win32 port.\n\n\nA notable absence is IPv6 support.\n\n\nWe are planning to reintroduce the capability to start Icecast \nas a Windows Service in the 2.5.0 release.", 
            "title": "Windows Specific"
        }
    ]
}